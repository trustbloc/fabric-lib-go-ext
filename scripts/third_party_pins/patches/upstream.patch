From 682e327c0cb3aeea631de24f74ae3a033a8a4365 Mon Sep 17 00:00:00 2001
From: Aleksandar Likic <aleksandar.likic@securekey.com>
Date: Wed, 13 Nov 2019 03:53:49 -0500
Subject: [PATCH] Fix upstream.

Signed-off-by: Aleksandar Likic <aleksandar.likic@securekey.com>
---
 .../fabric/common/capabilities/application.go |   2 +-
 .../common/capabilities/capabilities.go       |   4 +-
 .../fabric/common/capabilities/channel.go     |   4 +-
 .../fabric/common/capabilities/orderer.go     |   2 +-
 .../common/cauthdsl/cauthdsl_builder.go       |   6 +-
 .../fabric/common/cauthdsl/policyparser.go    |   6 +-
 .../fabric/common/channelconfig/acls.go       |   2 +-
 .../fabric/common/channelconfig/api.go        |  15 +-
 .../common/channelconfig/application.go       |  10 +-
 .../common/channelconfig/applicationorg.go    |  11 +-
 .../fabric/common/channelconfig/bundle.go     | 231 +-----------------
 .../fabric/common/channelconfig/channel.go    |  76 +-----
 .../fabric/common/channelconfig/consortium.go |   6 +-
 .../common/channelconfig/consortiums.go       |   6 +-
 .../fabric/common/channelconfig/orderer.go    |  17 +-
 .../common/channelconfig/organization.go      |  32 +--
 .../common/channelconfig/standardvalues.go    |   2 +-
 .../fabric/common/channelconfig/util.go       |  64 +----
 .../fabric/common/configtx/configtx.go        |   2 +-
 .../fabric/common/genesis/genesis.go          |   4 +-
 .../common/policies/implicitmetaparser.go     |   2 +-
 .../fabric/common/policies/policy.go          | 217 +---------------
 .../fabric/common/policies/util.go            |   4 +-
 .../fabric/common/tools/protolator/json.go    |   2 +-
 .../protolator/protoext/commonext/common.go   |   6 +-
 .../protolator/protoext/commonext/configtx.go |   2 +-
 .../protoext/commonext/configuration.go       |   8 +-
 .../protolator/protoext/commonext/policies.go |   2 +-
 .../tools/protolator/protoext/decorate.go     |  20 +-
 .../protoext/ledger/rwsetext/rwset.go         |   4 +-
 .../protolator/protoext/mspext/msp_config.go  |   2 +-
 .../protoext/mspext/msp_principal.go          |   2 +-
 .../protoext/ordererext/configuration.go      |   8 +-
 .../protoext/peerext/configuration.go         |   6 +-
 .../protolator/protoext/peerext/proposal.go   |   4 +-
 .../protoext/peerext/proposal_response.go     |   2 +-
 .../protoext/peerext/transaction.go           |   4 +-
 .../hyperledger/fabric/common/util/utils.go   |  48 +---
 .../fabric/common/viperutil/config_util.go    |   2 +-
 .../hyperledger/fabric/core/config/config.go  | 128 ----------
 .../txmgmt/rwsetutil/rwset_proto_util.go      |  83 +------
 .../ledger/kvledger/txmgmt/version/version.go |  27 ++
 .../core/ledger/util/txvalidationflags.go     |  13 +-
 .../fabric/internal/protoutil/commonutils.go  |  25 ++
 .../configtxgen/encoder/encoder.go            |  28 +--
 .../configtxgen/localconfig/config.go         |  94 +++----
 .../configtxlator/update/update.go            |   4 +-
 .../fabric/libpatch/logbridge/logbridge.go    |  55 +++++
 .../hyperledger/fabric/msp/configbuilder.go   | 120 +--------
 .../hyperledger/fabric/msp/factory.go         |  62 -----
 .../github.com/hyperledger/fabric/msp/msp.go  | 197 +--------------
 .../fabric/protoutil/blockutils.go            |   2 +-
 .../fabric/protoutil/commonutils.go           |  21 +-
 .../fabric/protoutil/configtxutils.go         |   2 +-
 .../hyperledger/fabric/protoutil/proputils.go |   4 +-
 .../fabric/protoutil/signeddata.go            |   5 +-
 .../hyperledger/fabric/protoutil/txutils.go   |   6 +-
 .../fabric/protoutil/unmarshalers.go          |  10 +-
 58 files changed, 326 insertions(+), 1407 deletions(-)
 delete mode 100644 internal/github.com/hyperledger/fabric/core/config/config.go
 create mode 100644 internal/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/version/version.go
 create mode 100644 internal/github.com/hyperledger/fabric/internal/protoutil/commonutils.go
 create mode 100644 internal/github.com/hyperledger/fabric/libpatch/logbridge/logbridge.go

diff --git a/internal/github.com/hyperledger/fabric/common/capabilities/application.go b/internal/github.com/hyperledger/fabric/common/capabilities/application.go
index d06dce9..b8d61db 100644
--- a/internal/github.com/hyperledger/fabric/common/capabilities/application.go
+++ b/internal/github.com/hyperledger/fabric/common/capabilities/application.go
@@ -11,7 +11,7 @@ Please review third_party pinning scripts and patches for more details.
 package capabilities
 
 import (
-	cb "github.com/hyperledger/fabric/protos/common"
+	cb "github.com/hyperledger/fabric-protos-go/common"
 )
 
 const (
diff --git a/internal/github.com/hyperledger/fabric/common/capabilities/capabilities.go b/internal/github.com/hyperledger/fabric/common/capabilities/capabilities.go
index 62e2143..2c7de71 100644
--- a/internal/github.com/hyperledger/fabric/common/capabilities/capabilities.go
+++ b/internal/github.com/hyperledger/fabric/common/capabilities/capabilities.go
@@ -11,9 +11,9 @@ Please review third_party pinning scripts and patches for more details.
 package capabilities
 
 import (
-	"github.com/hyperledger/fabric/common/flogging"
-	cb "github.com/hyperledger/fabric/protos/common"
+	cb "github.com/hyperledger/fabric-protos-go/common"
 	"github.com/pkg/errors"
+	flogging "github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/libpatch/logbridge"
 )
 
 var logger = flogging.MustGetLogger("common.capabilities")
diff --git a/internal/github.com/hyperledger/fabric/common/capabilities/channel.go b/internal/github.com/hyperledger/fabric/common/capabilities/channel.go
index c26a6be..5ea8ab4 100644
--- a/internal/github.com/hyperledger/fabric/common/capabilities/channel.go
+++ b/internal/github.com/hyperledger/fabric/common/capabilities/channel.go
@@ -11,8 +11,8 @@ Please review third_party pinning scripts and patches for more details.
 package capabilities
 
 import (
-	"github.com/hyperledger/fabric/msp"
-	cb "github.com/hyperledger/fabric/protos/common"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/msp"
 )
 
 const (
diff --git a/internal/github.com/hyperledger/fabric/common/capabilities/orderer.go b/internal/github.com/hyperledger/fabric/common/capabilities/orderer.go
index f72c37a..c578511 100644
--- a/internal/github.com/hyperledger/fabric/common/capabilities/orderer.go
+++ b/internal/github.com/hyperledger/fabric/common/capabilities/orderer.go
@@ -11,7 +11,7 @@ Please review third_party pinning scripts and patches for more details.
 package capabilities
 
 import (
-	cb "github.com/hyperledger/fabric/protos/common"
+	cb "github.com/hyperledger/fabric-protos-go/common"
 )
 
 const (
diff --git a/internal/github.com/hyperledger/fabric/common/cauthdsl/cauthdsl_builder.go b/internal/github.com/hyperledger/fabric/common/cauthdsl/cauthdsl_builder.go
index 9015d6d..f32cf02 100644
--- a/internal/github.com/hyperledger/fabric/common/cauthdsl/cauthdsl_builder.go
+++ b/internal/github.com/hyperledger/fabric/common/cauthdsl/cauthdsl_builder.go
@@ -14,9 +14,9 @@ import (
 	"sort"
 
 	"github.com/golang/protobuf/proto"
-	cb "github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protos/msp"
-	"github.com/hyperledger/fabric/protoutil"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	"github.com/hyperledger/fabric-protos-go/msp"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/internal/protoutil"
 )
 
 // AcceptAllPolicy always evaluates to true
diff --git a/internal/github.com/hyperledger/fabric/common/cauthdsl/policyparser.go b/internal/github.com/hyperledger/fabric/common/cauthdsl/policyparser.go
index dc689a1..400b192 100644
--- a/internal/github.com/hyperledger/fabric/common/cauthdsl/policyparser.go
+++ b/internal/github.com/hyperledger/fabric/common/cauthdsl/policyparser.go
@@ -18,9 +18,9 @@ import (
 	"strings"
 
 	"github.com/Knetic/govaluate"
-	"github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protos/msp"
-	"github.com/hyperledger/fabric/protoutil"
+	"github.com/hyperledger/fabric-protos-go/common"
+	"github.com/hyperledger/fabric-protos-go/msp"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/internal/protoutil"
 )
 
 // Gate values
diff --git a/internal/github.com/hyperledger/fabric/common/channelconfig/acls.go b/internal/github.com/hyperledger/fabric/common/channelconfig/acls.go
index 218af72..f5a7722 100644
--- a/internal/github.com/hyperledger/fabric/common/channelconfig/acls.go
+++ b/internal/github.com/hyperledger/fabric/common/channelconfig/acls.go
@@ -11,7 +11,7 @@ Please review third_party pinning scripts and patches for more details.
 package channelconfig
 
 import (
-	pb "github.com/hyperledger/fabric/protos/peer"
+	pb "github.com/hyperledger/fabric-protos-go/peer"
 )
 
 // aclsProvider provides mappings for resource to policy names
diff --git a/internal/github.com/hyperledger/fabric/common/channelconfig/api.go b/internal/github.com/hyperledger/fabric/common/channelconfig/api.go
index fb4f6a7..ceead28 100644
--- a/internal/github.com/hyperledger/fabric/common/channelconfig/api.go
+++ b/internal/github.com/hyperledger/fabric/common/channelconfig/api.go
@@ -13,12 +13,12 @@ package channelconfig
 import (
 	"time"
 
-	"github.com/hyperledger/fabric/common/configtx"
-	"github.com/hyperledger/fabric/common/policies"
-	"github.com/hyperledger/fabric/msp"
-	cb "github.com/hyperledger/fabric/protos/common"
-	ab "github.com/hyperledger/fabric/protos/orderer"
-	pb "github.com/hyperledger/fabric/protos/peer"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	ab "github.com/hyperledger/fabric-protos-go/orderer"
+	pb "github.com/hyperledger/fabric-protos-go/peer"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/configtx"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/policies"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/msp"
 )
 
 // Org stores the common organizational config
@@ -255,9 +255,6 @@ type Resources interface {
 	// and whether the Application config exists
 	ApplicationConfig() (Application, bool)
 
-	// MSPManager returns the msp.MSPManager for the chain
-	MSPManager() msp.MSPManager
-
 	// ValidateNew should return an error if a new set of configuration resources is incompatible with the current one
 	ValidateNew(resources Resources) error
 }
diff --git a/internal/github.com/hyperledger/fabric/common/channelconfig/application.go b/internal/github.com/hyperledger/fabric/common/channelconfig/application.go
index 0fa3ad3..5650f82 100644
--- a/internal/github.com/hyperledger/fabric/common/channelconfig/application.go
+++ b/internal/github.com/hyperledger/fabric/common/channelconfig/application.go
@@ -11,10 +11,10 @@ Please review third_party pinning scripts and patches for more details.
 package channelconfig
 
 import (
-	"github.com/hyperledger/fabric/common/capabilities"
-	cb "github.com/hyperledger/fabric/protos/common"
-	pb "github.com/hyperledger/fabric/protos/peer"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	pb "github.com/hyperledger/fabric-protos-go/peer"
 	"github.com/pkg/errors"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/capabilities"
 )
 
 const (
@@ -38,7 +38,7 @@ type ApplicationConfig struct {
 }
 
 // NewApplicationConfig creates config from an Application config group
-func NewApplicationConfig(appGroup *cb.ConfigGroup, mspConfig *MSPConfigHandler) (*ApplicationConfig, error) {
+func NewApplicationConfig(appGroup *cb.ConfigGroup) (*ApplicationConfig, error) {
 	ac := &ApplicationConfig{
 		applicationOrgs: make(map[string]ApplicationOrg),
 		protos:          &ApplicationProtos{},
@@ -56,7 +56,7 @@ func NewApplicationConfig(appGroup *cb.ConfigGroup, mspConfig *MSPConfigHandler)
 
 	var err error
 	for orgName, orgGroup := range appGroup.Groups {
-		ac.applicationOrgs[orgName], err = NewApplicationOrgConfig(orgName, orgGroup, mspConfig)
+		ac.applicationOrgs[orgName], err = NewApplicationOrgConfig(orgName, orgGroup)
 		if err != nil {
 			return nil, err
 		}
diff --git a/internal/github.com/hyperledger/fabric/common/channelconfig/applicationorg.go b/internal/github.com/hyperledger/fabric/common/channelconfig/applicationorg.go
index baf1df6..edd0262 100644
--- a/internal/github.com/hyperledger/fabric/common/channelconfig/applicationorg.go
+++ b/internal/github.com/hyperledger/fabric/common/channelconfig/applicationorg.go
@@ -13,8 +13,8 @@ package channelconfig
 import (
 	"fmt"
 
-	cb "github.com/hyperledger/fabric/protos/common"
-	pb "github.com/hyperledger/fabric/protos/peer"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	pb "github.com/hyperledger/fabric-protos-go/peer"
 	"github.com/pkg/errors"
 )
 
@@ -36,7 +36,7 @@ type ApplicationOrgConfig struct {
 }
 
 // NewApplicationOrgConfig creates a new config for an application org
-func NewApplicationOrgConfig(id string, orgGroup *cb.ConfigGroup, mspConfig *MSPConfigHandler) (*ApplicationOrgConfig, error) {
+func NewApplicationOrgConfig(id string, orgGroup *cb.ConfigGroup) (*ApplicationOrgConfig, error) {
 	if len(orgGroup.Groups) > 0 {
 		return nil, fmt.Errorf("ApplicationOrg config does not allow sub-groups")
 	}
@@ -52,9 +52,8 @@ func NewApplicationOrgConfig(id string, orgGroup *cb.ConfigGroup, mspConfig *MSP
 		name:   id,
 		protos: protos,
 		OrganizationConfig: &OrganizationConfig{
-			name:             id,
-			protos:           orgProtos,
-			mspConfigHandler: mspConfig,
+			name:   id,
+			protos: orgProtos,
 		},
 	}
 
diff --git a/internal/github.com/hyperledger/fabric/common/channelconfig/bundle.go b/internal/github.com/hyperledger/fabric/common/channelconfig/bundle.go
index e174508..268ad19 100644
--- a/internal/github.com/hyperledger/fabric/common/channelconfig/bundle.go
+++ b/internal/github.com/hyperledger/fabric/common/channelconfig/bundle.go
@@ -11,15 +11,7 @@ Please review third_party pinning scripts and patches for more details.
 package channelconfig
 
 import (
-	"github.com/hyperledger/fabric/bccsp"
-	"github.com/hyperledger/fabric/common/cauthdsl"
-	"github.com/hyperledger/fabric/common/configtx"
-	"github.com/hyperledger/fabric/common/flogging"
-	"github.com/hyperledger/fabric/common/policies"
-	"github.com/hyperledger/fabric/msp"
-	cb "github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protoutil"
-	"github.com/pkg/errors"
+	flogging "github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/libpatch/logbridge"
 )
 
 var logger = flogging.MustGetLogger("common.channelconfig")
@@ -27,224 +19,3 @@ var logger = flogging.MustGetLogger("common.channelconfig")
 // RootGroupKey is the key for namespacing the channel config, especially for
 // policy evaluation.
 const RootGroupKey = "Channel"
-
-// Bundle is a collection of resources which will always have a consistent
-// view of the channel configuration.  In particular, for a given bundle reference,
-// the config sequence, the policy manager etc. will always return exactly the
-// same value.  The Bundle structure is immutable and will always be replaced in its
-// entirety, with new backing memory.
-type Bundle struct {
-	policyManager   policies.Manager
-	channelConfig   *ChannelConfig
-	configtxManager configtx.Validator
-}
-
-// PolicyManager returns the policy manager constructed for this config.
-func (b *Bundle) PolicyManager() policies.Manager {
-	return b.policyManager
-}
-
-// MSPManager returns the MSP manager constructed for this config.
-func (b *Bundle) MSPManager() msp.MSPManager {
-	return b.channelConfig.MSPManager()
-}
-
-// ChannelConfig returns the config.Channel for the chain.
-func (b *Bundle) ChannelConfig() Channel {
-	return b.channelConfig
-}
-
-// OrdererConfig returns the config.Orderer for the channel
-// and whether the Orderer config exists.
-func (b *Bundle) OrdererConfig() (Orderer, bool) {
-	result := b.channelConfig.OrdererConfig()
-	return result, result != nil
-}
-
-// ConsortiumsConfig returns the config.Consortiums for the channel
-// and whether the consortiums config exists.
-func (b *Bundle) ConsortiumsConfig() (Consortiums, bool) {
-	result := b.channelConfig.ConsortiumsConfig()
-	return result, result != nil
-}
-
-// ApplicationConfig returns the configtxapplication.SharedConfig for the channel
-// and whether the Application config exists.
-func (b *Bundle) ApplicationConfig() (Application, bool) {
-	result := b.channelConfig.ApplicationConfig()
-	return result, result != nil
-}
-
-// ConfigtxValidator returns the configtx.Validator for the channel.
-func (b *Bundle) ConfigtxValidator() configtx.Validator {
-	return b.configtxManager
-}
-
-// ValidateNew checks if a new bundle's contained configuration is valid to be derived from the current bundle.
-// This allows checks of the nature "Make sure that the consensus type did not change".
-func (b *Bundle) ValidateNew(nb Resources) error {
-	if oc, ok := b.OrdererConfig(); ok {
-		noc, ok := nb.OrdererConfig()
-		if !ok {
-			return errors.New("current config has orderer section, but new config does not")
-		}
-
-		// Prevent consensus-type migration when channel capabilities ConsensusTypeMigration is disabled
-		if !b.channelConfig.Capabilities().ConsensusTypeMigration() {
-			if oc.ConsensusType() != noc.ConsensusType() {
-				return errors.Errorf("attempted to change consensus type from %s to %s",
-					oc.ConsensusType(), noc.ConsensusType())
-			}
-		}
-
-		for orgName, org := range oc.Organizations() {
-			norg, ok := noc.Organizations()[orgName]
-			if !ok {
-				continue
-			}
-			mspID := org.MSPID()
-			if mspID != norg.MSPID() {
-				return errors.Errorf("orderer org %s attempted to change MSP ID from %s to %s", orgName, mspID, norg.MSPID())
-			}
-		}
-	}
-
-	if ac, ok := b.ApplicationConfig(); ok {
-		nac, ok := nb.ApplicationConfig()
-		if !ok {
-			return errors.New("current config has application section, but new config does not")
-		}
-
-		for orgName, org := range ac.Organizations() {
-			norg, ok := nac.Organizations()[orgName]
-			if !ok {
-				continue
-			}
-			mspID := org.MSPID()
-			if mspID != norg.MSPID() {
-				return errors.Errorf("application org %s attempted to change MSP ID from %s to %s", orgName, mspID, norg.MSPID())
-			}
-		}
-	}
-
-	if cc, ok := b.ConsortiumsConfig(); ok {
-		ncc, ok := nb.ConsortiumsConfig()
-		if !ok {
-			return errors.Errorf("current config has consortiums section, but new config does not")
-		}
-
-		for consortiumName, consortium := range cc.Consortiums() {
-			nconsortium, ok := ncc.Consortiums()[consortiumName]
-			if !ok {
-				continue
-			}
-
-			for orgName, org := range consortium.Organizations() {
-				norg, ok := nconsortium.Organizations()[orgName]
-				if !ok {
-					continue
-				}
-				mspID := org.MSPID()
-				if mspID != norg.MSPID() {
-					return errors.Errorf("consortium %s org %s attempted to change MSP ID from %s to %s", consortiumName, orgName, mspID, norg.MSPID())
-				}
-			}
-		}
-	} else if _, okNew := nb.ConsortiumsConfig(); okNew {
-		return errors.Errorf("current config has no consortiums section, but new config does")
-	}
-
-	return nil
-}
-
-// NewBundleFromEnvelope wraps the NewBundle function, extracting the needed
-// information from a full configtx
-func NewBundleFromEnvelope(env *cb.Envelope, bccsp bccsp.BCCSP) (*Bundle, error) {
-	payload, err := protoutil.UnmarshalPayload(env.Payload)
-	if err != nil {
-		return nil, errors.Wrap(err, "failed to unmarshal payload from envelope")
-	}
-
-	configEnvelope, err := configtx.UnmarshalConfigEnvelope(payload.Data)
-	if err != nil {
-		return nil, errors.Wrap(err, "failed to unmarshal config envelope from payload")
-	}
-
-	if payload.Header == nil {
-		return nil, errors.Errorf("envelope header cannot be nil")
-	}
-
-	chdr, err := protoutil.UnmarshalChannelHeader(payload.Header.ChannelHeader)
-	if err != nil {
-		return nil, errors.Wrap(err, "failed to unmarshal channel header")
-	}
-
-	return NewBundle(chdr.ChannelId, configEnvelope.Config, bccsp)
-}
-
-// NewBundle creates a new immutable bundle of configuration
-func NewBundle(channelID string, config *cb.Config, bccsp bccsp.BCCSP) (*Bundle, error) {
-	if err := preValidate(config); err != nil {
-		return nil, err
-	}
-
-	channelConfig, err := NewChannelConfig(config.ChannelGroup, bccsp)
-	if err != nil {
-		return nil, errors.Wrap(err, "initializing channelconfig failed")
-	}
-
-	policyProviderMap := make(map[int32]policies.Provider)
-	for pType := range cb.Policy_PolicyType_name {
-		rtype := cb.Policy_PolicyType(pType)
-		switch rtype {
-		case cb.Policy_UNKNOWN:
-			// Do not register a handler
-		case cb.Policy_SIGNATURE:
-			policyProviderMap[pType] = cauthdsl.NewPolicyProvider(channelConfig.MSPManager())
-		case cb.Policy_MSP:
-			// Add hook for MSP Handler here
-		}
-	}
-
-	policyManager, err := policies.NewManagerImpl(RootGroupKey, policyProviderMap, config.ChannelGroup)
-	if err != nil {
-		return nil, errors.Wrap(err, "initializing policymanager failed")
-	}
-
-	configtxManager, err := configtx.NewValidatorImpl(channelID, config, RootGroupKey, policyManager)
-	if err != nil {
-		return nil, errors.Wrap(err, "initializing configtx manager failed")
-	}
-
-	return &Bundle{
-		policyManager:   policyManager,
-		channelConfig:   channelConfig,
-		configtxManager: configtxManager,
-	}, nil
-}
-
-func preValidate(config *cb.Config) error {
-	if config == nil {
-		return errors.New("channelconfig Config cannot be nil")
-	}
-
-	if config.ChannelGroup == nil {
-		return errors.New("config must contain a channel group")
-	}
-
-	if og, ok := config.ChannelGroup.Groups[OrdererGroupKey]; ok {
-		if _, ok := og.Values[CapabilitiesKey]; !ok {
-			if _, ok := config.ChannelGroup.Values[CapabilitiesKey]; ok {
-				return errors.New("cannot enable channel capabilities without orderer support first")
-			}
-
-			if ag, ok := config.ChannelGroup.Groups[ApplicationGroupKey]; ok {
-				if _, ok := ag.Values[CapabilitiesKey]; ok {
-					return errors.New("cannot enable application capabilities without orderer support first")
-				}
-			}
-		}
-	}
-
-	return nil
-}
diff --git a/internal/github.com/hyperledger/fabric/common/channelconfig/channel.go b/internal/github.com/hyperledger/fabric/common/channelconfig/channel.go
index c79b9ea..3b2556c 100644
--- a/internal/github.com/hyperledger/fabric/common/channelconfig/channel.go
+++ b/internal/github.com/hyperledger/fabric/common/channelconfig/channel.go
@@ -14,12 +14,8 @@ import (
 	"fmt"
 	"math"
 
-	"github.com/hyperledger/fabric/bccsp"
-	"github.com/hyperledger/fabric/common/capabilities"
-	"github.com/hyperledger/fabric/common/util"
-	"github.com/hyperledger/fabric/msp"
-	cb "github.com/hyperledger/fabric/protos/common"
-	"github.com/pkg/errors"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/capabilities"
 )
 
 // Channel config keys
@@ -42,6 +38,12 @@ const (
 	// CapabilitiesKey is the name of the key which refers to capabilities, it appears at the channel,
 	// application, and orderer levels and this constant is used for all three.
 	CapabilitiesKey = "Capabilities"
+
+	// SHA256
+	SHA256 = "SHA256"
+
+	// SHA3_256
+	SHA3_256 = "SHA3_256"
 )
 
 // ChannelValues gives read only access to the channel configuration
@@ -71,62 +73,11 @@ type ChannelProtos struct {
 type ChannelConfig struct {
 	protos *ChannelProtos
 
-	hashingAlgorithm func(input []byte) []byte
-
-	mspManager msp.MSPManager
-
 	appConfig         *ApplicationConfig
 	ordererConfig     *OrdererConfig
 	consortiumsConfig *ConsortiumsConfig
 }
 
-// NewChannelConfig creates a new ChannelConfig
-func NewChannelConfig(channelGroup *cb.ConfigGroup, bccsp bccsp.BCCSP) (*ChannelConfig, error) {
-	cc := &ChannelConfig{
-		protos: &ChannelProtos{},
-	}
-
-	if err := DeserializeProtoValuesFromGroup(channelGroup, cc.protos); err != nil {
-		return nil, errors.Wrap(err, "failed to deserialize values")
-	}
-
-	capabilities := cc.Capabilities()
-
-	if err := cc.Validate(capabilities); err != nil {
-		return nil, err
-	}
-
-	mspConfigHandler := NewMSPConfigHandler(capabilities.MSPVersion(), bccsp)
-
-	var err error
-	for groupName, group := range channelGroup.Groups {
-		switch groupName {
-		case ApplicationGroupKey:
-			cc.appConfig, err = NewApplicationConfig(group, mspConfigHandler)
-		case OrdererGroupKey:
-			cc.ordererConfig, err = NewOrdererConfig(group, mspConfigHandler, capabilities)
-		case ConsortiumsGroupKey:
-			cc.consortiumsConfig, err = NewConsortiumsConfig(group, mspConfigHandler)
-		default:
-			return nil, fmt.Errorf("Disallowed channel group: %s", group)
-		}
-		if err != nil {
-			return nil, errors.Wrapf(err, "could not create channel %s sub-group config", groupName)
-		}
-	}
-
-	if cc.mspManager, err = mspConfigHandler.CreateMSPManager(); err != nil {
-		return nil, err
-	}
-
-	return cc, nil
-}
-
-// MSPManager returns the MSP manager for this config
-func (cc *ChannelConfig) MSPManager() msp.MSPManager {
-	return cc.mspManager
-}
-
 // OrdererConfig returns the orderer config associated with this channel
 func (cc *ChannelConfig) OrdererConfig() *OrdererConfig {
 	return cc.ordererConfig
@@ -142,11 +93,6 @@ func (cc *ChannelConfig) ConsortiumsConfig() *ConsortiumsConfig {
 	return cc.consortiumsConfig
 }
 
-// HashingAlgorithm returns a function pointer to the chain hashing algorihtm
-func (cc *ChannelConfig) HashingAlgorithm() func(input []byte) []byte {
-	return cc.hashingAlgorithm
-}
-
 // BlockDataHashingStructure returns the width to use when forming the block data hashing structure
 func (cc *ChannelConfig) BlockDataHashingStructureWidth() uint32 {
 	return cc.protos.BlockDataHashingStructure.Width
@@ -190,10 +136,8 @@ func (cc *ChannelConfig) Validate(channelCapabilities ChannelCapabilities) error
 
 func (cc *ChannelConfig) validateHashingAlgorithm() error {
 	switch cc.protos.HashingAlgorithm.Name {
-	case bccsp.SHA256:
-		cc.hashingAlgorithm = util.ComputeSHA256
-	case bccsp.SHA3_256:
-		cc.hashingAlgorithm = util.ComputeSHA3256
+	case SHA256:
+	case SHA3_256:
 	default:
 		return fmt.Errorf("Unknown hashing algorithm type: %s", cc.protos.HashingAlgorithm.Name)
 	}
diff --git a/internal/github.com/hyperledger/fabric/common/channelconfig/consortium.go b/internal/github.com/hyperledger/fabric/common/channelconfig/consortium.go
index 633eb86..f5ff851 100644
--- a/internal/github.com/hyperledger/fabric/common/channelconfig/consortium.go
+++ b/internal/github.com/hyperledger/fabric/common/channelconfig/consortium.go
@@ -11,7 +11,7 @@ Please review third_party pinning scripts and patches for more details.
 package channelconfig
 
 import (
-	cb "github.com/hyperledger/fabric/protos/common"
+	cb "github.com/hyperledger/fabric-protos-go/common"
 	"github.com/pkg/errors"
 )
 
@@ -33,7 +33,7 @@ type ConsortiumConfig struct {
 }
 
 // NewConsortiumConfig creates a new instance of the consoritums config
-func NewConsortiumConfig(consortiumGroup *cb.ConfigGroup, mspConfig *MSPConfigHandler) (*ConsortiumConfig, error) {
+func NewConsortiumConfig(consortiumGroup *cb.ConfigGroup) (*ConsortiumConfig, error) {
 	cc := &ConsortiumConfig{
 		protos: &ConsortiumProtos{},
 		orgs:   make(map[string]Org),
@@ -45,7 +45,7 @@ func NewConsortiumConfig(consortiumGroup *cb.ConfigGroup, mspConfig *MSPConfigHa
 
 	for orgName, orgGroup := range consortiumGroup.Groups {
 		var err error
-		if cc.orgs[orgName], err = NewOrganizationConfig(orgName, orgGroup, mspConfig); err != nil {
+		if cc.orgs[orgName], err = NewOrganizationConfig(orgName, orgGroup); err != nil {
 			return nil, err
 		}
 	}
diff --git a/internal/github.com/hyperledger/fabric/common/channelconfig/consortiums.go b/internal/github.com/hyperledger/fabric/common/channelconfig/consortiums.go
index 532de5b..391a0bc 100644
--- a/internal/github.com/hyperledger/fabric/common/channelconfig/consortiums.go
+++ b/internal/github.com/hyperledger/fabric/common/channelconfig/consortiums.go
@@ -11,7 +11,7 @@ Please review third_party pinning scripts and patches for more details.
 package channelconfig
 
 import (
-	cb "github.com/hyperledger/fabric/protos/common"
+	cb "github.com/hyperledger/fabric-protos-go/common"
 )
 
 const (
@@ -25,14 +25,14 @@ type ConsortiumsConfig struct {
 }
 
 // NewConsortiumsConfig creates a new instance of the consoritums config
-func NewConsortiumsConfig(consortiumsGroup *cb.ConfigGroup, mspConfig *MSPConfigHandler) (*ConsortiumsConfig, error) {
+func NewConsortiumsConfig(consortiumsGroup *cb.ConfigGroup) (*ConsortiumsConfig, error) {
 	cc := &ConsortiumsConfig{
 		consortiums: make(map[string]Consortium),
 	}
 
 	for consortiumName, consortiumGroup := range consortiumsGroup.Groups {
 		var err error
-		if cc.consortiums[consortiumName], err = NewConsortiumConfig(consortiumGroup, mspConfig); err != nil {
+		if cc.consortiums[consortiumName], err = NewConsortiumConfig(consortiumGroup); err != nil {
 			return nil, err
 		}
 	}
diff --git a/internal/github.com/hyperledger/fabric/common/channelconfig/orderer.go b/internal/github.com/hyperledger/fabric/common/channelconfig/orderer.go
index 97709f2..1e5b863 100644
--- a/internal/github.com/hyperledger/fabric/common/channelconfig/orderer.go
+++ b/internal/github.com/hyperledger/fabric/common/channelconfig/orderer.go
@@ -17,10 +17,10 @@ import (
 	"strings"
 	"time"
 
-	"github.com/hyperledger/fabric/common/capabilities"
-	cb "github.com/hyperledger/fabric/protos/common"
-	ab "github.com/hyperledger/fabric/protos/orderer"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	ab "github.com/hyperledger/fabric-protos-go/orderer"
 	"github.com/pkg/errors"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/capabilities"
 )
 
 const (
@@ -84,7 +84,7 @@ func (oc *OrdererOrgConfig) Endpoints() []string {
 }
 
 // NewOrdererOrgConfig returns an orderer org config built from the given ConfigGroup.
-func NewOrdererOrgConfig(orgName string, orgGroup *cb.ConfigGroup, mspConfigHandler *MSPConfigHandler, channelCapabilities ChannelCapabilities) (*OrdererOrgConfig, error) {
+func NewOrdererOrgConfig(orgName string, orgGroup *cb.ConfigGroup, channelCapabilities ChannelCapabilities) (*OrdererOrgConfig, error) {
 	if len(orgGroup.Groups) > 0 {
 		return nil, fmt.Errorf("OrdererOrg config does not allow sub-groups")
 	}
@@ -106,9 +106,8 @@ func NewOrdererOrgConfig(orgName string, orgGroup *cb.ConfigGroup, mspConfigHand
 		name:   orgName,
 		protos: protos,
 		OrganizationConfig: &OrganizationConfig{
-			name:             orgName,
-			protos:           orgProtos,
-			mspConfigHandler: mspConfigHandler,
+			name:   orgName,
+			protos: orgProtos,
 		},
 	}
 
@@ -124,7 +123,7 @@ func (ooc *OrdererOrgConfig) Validate() error {
 }
 
 // NewOrdererConfig creates a new instance of the orderer config.
-func NewOrdererConfig(ordererGroup *cb.ConfigGroup, mspConfig *MSPConfigHandler, channelCapabilities ChannelCapabilities) (*OrdererConfig, error) {
+func NewOrdererConfig(ordererGroup *cb.ConfigGroup, channelCapabilities ChannelCapabilities) (*OrdererConfig, error) {
 	oc := &OrdererConfig{
 		protos: &OrdererProtos{},
 		orgs:   make(map[string]OrdererOrg),
@@ -140,7 +139,7 @@ func NewOrdererConfig(ordererGroup *cb.ConfigGroup, mspConfig *MSPConfigHandler,
 
 	for orgName, orgGroup := range ordererGroup.Groups {
 		var err error
-		if oc.orgs[orgName], err = NewOrdererOrgConfig(orgName, orgGroup, mspConfig, channelCapabilities); err != nil {
+		if oc.orgs[orgName], err = NewOrdererOrgConfig(orgName, orgGroup, channelCapabilities); err != nil {
 			return nil, err
 		}
 	}
diff --git a/internal/github.com/hyperledger/fabric/common/channelconfig/organization.go b/internal/github.com/hyperledger/fabric/common/channelconfig/organization.go
index 4fd0423..cb22722 100644
--- a/internal/github.com/hyperledger/fabric/common/channelconfig/organization.go
+++ b/internal/github.com/hyperledger/fabric/common/channelconfig/organization.go
@@ -13,9 +13,8 @@ package channelconfig
 import (
 	"fmt"
 
-	"github.com/hyperledger/fabric/msp"
-	cb "github.com/hyperledger/fabric/protos/common"
-	mspprotos "github.com/hyperledger/fabric/protos/msp"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	mspprotos "github.com/hyperledger/fabric-protos-go/msp"
 	"github.com/pkg/errors"
 )
 
@@ -33,22 +32,19 @@ type OrganizationProtos struct {
 type OrganizationConfig struct {
 	protos *OrganizationProtos
 
-	mspConfigHandler *MSPConfigHandler
-	msp              msp.MSP
-	mspID            string
-	name             string
+	mspID string
+	name  string
 }
 
 // NewOrganizationConfig creates a new config for an organization
-func NewOrganizationConfig(name string, orgGroup *cb.ConfigGroup, mspConfigHandler *MSPConfigHandler) (*OrganizationConfig, error) {
+func NewOrganizationConfig(name string, orgGroup *cb.ConfigGroup) (*OrganizationConfig, error) {
 	if len(orgGroup.Groups) > 0 {
 		return nil, fmt.Errorf("organizations do not support sub-groups")
 	}
 
 	oc := &OrganizationConfig{
-		protos:           &OrganizationProtos{},
-		name:             name,
-		mspConfigHandler: mspConfigHandler,
+		protos: &OrganizationProtos{},
+		name:   name,
 	}
 
 	if err := DeserializeProtoValuesFromGroup(orgGroup, oc.protos); err != nil {
@@ -78,19 +74,5 @@ func (oc *OrganizationConfig) Validate() error {
 }
 
 func (oc *OrganizationConfig) validateMSP() error {
-	var err error
-
-	logger.Debugf("Setting up MSP for org %s", oc.name)
-	oc.msp, err = oc.mspConfigHandler.ProposeMSP(oc.protos.MSP)
-	if err != nil {
-		return err
-	}
-
-	oc.mspID, _ = oc.msp.GetIdentifier()
-
-	if oc.mspID == "" {
-		return fmt.Errorf("MSP for org %s has empty MSP ID", oc.name)
-	}
-
 	return nil
 }
diff --git a/internal/github.com/hyperledger/fabric/common/channelconfig/standardvalues.go b/internal/github.com/hyperledger/fabric/common/channelconfig/standardvalues.go
index 381365d..de5ce6e 100644
--- a/internal/github.com/hyperledger/fabric/common/channelconfig/standardvalues.go
+++ b/internal/github.com/hyperledger/fabric/common/channelconfig/standardvalues.go
@@ -15,7 +15,7 @@ import (
 	"reflect"
 
 	"github.com/golang/protobuf/proto"
-	cb "github.com/hyperledger/fabric/protos/common"
+	cb "github.com/hyperledger/fabric-protos-go/common"
 )
 
 // DeserializeGroup deserializes the value for all values in a config group
diff --git a/internal/github.com/hyperledger/fabric/common/channelconfig/util.go b/internal/github.com/hyperledger/fabric/common/channelconfig/util.go
index fcb99ca..325b036 100644
--- a/internal/github.com/hyperledger/fabric/common/channelconfig/util.go
+++ b/internal/github.com/hyperledger/fabric/common/channelconfig/util.go
@@ -16,14 +16,11 @@ import (
 	"math"
 
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/bccsp"
-	cb "github.com/hyperledger/fabric/protos/common"
-	mspprotos "github.com/hyperledger/fabric/protos/msp"
-	ab "github.com/hyperledger/fabric/protos/orderer"
-	"github.com/hyperledger/fabric/protos/orderer/etcdraft"
-	pb "github.com/hyperledger/fabric/protos/peer"
-	"github.com/hyperledger/fabric/protoutil"
-	"github.com/pkg/errors"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	mspprotos "github.com/hyperledger/fabric-protos-go/msp"
+	ab "github.com/hyperledger/fabric-protos-go/orderer"
+	"github.com/hyperledger/fabric-protos-go/orderer/etcdraft"
+	pb "github.com/hyperledger/fabric-protos-go/peer"
 )
 
 const (
@@ -36,7 +33,7 @@ const (
 	// AdminsPolicyKey is the key used for the read policy
 	AdminsPolicyKey = "Admins"
 
-	defaultHashingAlgorithm = bccsp.SHA256
+	defaultHashingAlgorithm = SHA256
 
 	defaultBlockDataHashingStructureWidth = math.MaxUint32
 )
@@ -243,55 +240,6 @@ func ACLValues(acls map[string]string) *StandardConfigValue {
 	}
 }
 
-// ValidateCapabilities validates whether the peer can meet the capabilities requirement in the given config block
-func ValidateCapabilities(block *cb.Block, bccsp bccsp.BCCSP) error {
-	envelopeConfig, err := protoutil.ExtractEnvelope(block, 0)
-	if err != nil {
-		return errors.Errorf("failed to %s", err)
-	}
-
-	configEnv := &cb.ConfigEnvelope{}
-	_, err = protoutil.UnmarshalEnvelopeOfType(envelopeConfig, cb.HeaderType_CONFIG, configEnv)
-	if err != nil {
-		return errors.Errorf("malformed configuration envelope: %s", err)
-	}
-
-	if configEnv.Config == nil {
-		return errors.New("nil config envelope Config")
-	}
-
-	if configEnv.Config.ChannelGroup == nil {
-		return errors.New("no channel configuration was found in the config block")
-	}
-
-	if configEnv.Config.ChannelGroup.Groups == nil {
-		return errors.New("no channel configuration groups are available")
-	}
-
-	_, exists := configEnv.Config.ChannelGroup.Groups[ApplicationGroupKey]
-	if !exists {
-		return errors.Errorf("invalid configuration block, missing %s "+
-			"configuration group", ApplicationGroupKey)
-	}
-
-	cc, err := NewChannelConfig(configEnv.Config.ChannelGroup, bccsp)
-	if err != nil {
-		return errors.Errorf("no valid channel configuration found due to %s", err)
-	}
-
-	// Check the channel top-level capabilities
-	if err := cc.Capabilities().Supported(); err != nil {
-		return err
-	}
-
-	// Check the application capabilities
-	if err := cc.ApplicationConfig().Capabilities().Supported(); err != nil {
-		return err
-	}
-
-	return nil
-}
-
 // MarshalEtcdRaftMetadata serializes etcd RAFT metadata.
 func MarshalEtcdRaftMetadata(md *etcdraft.ConfigMetadata) ([]byte, error) {
 	copyMd := proto.Clone(md).(*etcdraft.ConfigMetadata)
diff --git a/internal/github.com/hyperledger/fabric/common/configtx/configtx.go b/internal/github.com/hyperledger/fabric/common/configtx/configtx.go
index 6da7a3d..2088b19 100644
--- a/internal/github.com/hyperledger/fabric/common/configtx/configtx.go
+++ b/internal/github.com/hyperledger/fabric/common/configtx/configtx.go
@@ -11,7 +11,7 @@ Please review third_party pinning scripts and patches for more details.
 package configtx
 
 import (
-	cb "github.com/hyperledger/fabric/protos/common"
+	cb "github.com/hyperledger/fabric-protos-go/common"
 )
 
 // Validator provides a mechanism to propose config updates, see the config update results
diff --git a/internal/github.com/hyperledger/fabric/common/genesis/genesis.go b/internal/github.com/hyperledger/fabric/common/genesis/genesis.go
index 847b64f..12e8184 100644
--- a/internal/github.com/hyperledger/fabric/common/genesis/genesis.go
+++ b/internal/github.com/hyperledger/fabric/common/genesis/genesis.go
@@ -11,8 +11,8 @@ Please review third_party pinning scripts and patches for more details.
 package genesis
 
 import (
-	cb "github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protoutil"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/protoutil"
 )
 
 const (
diff --git a/internal/github.com/hyperledger/fabric/common/policies/implicitmetaparser.go b/internal/github.com/hyperledger/fabric/common/policies/implicitmetaparser.go
index 9425623..81e448a 100644
--- a/internal/github.com/hyperledger/fabric/common/policies/implicitmetaparser.go
+++ b/internal/github.com/hyperledger/fabric/common/policies/implicitmetaparser.go
@@ -13,7 +13,7 @@ package policies
 import (
 	"strings"
 
-	cb "github.com/hyperledger/fabric/protos/common"
+	cb "github.com/hyperledger/fabric-protos-go/common"
 	"github.com/pkg/errors"
 )
 
diff --git a/internal/github.com/hyperledger/fabric/common/policies/policy.go b/internal/github.com/hyperledger/fabric/common/policies/policy.go
index c9ba844..0c01954 100644
--- a/internal/github.com/hyperledger/fabric/common/policies/policy.go
+++ b/internal/github.com/hyperledger/fabric/common/policies/policy.go
@@ -11,16 +11,11 @@ Please review third_party pinning scripts and patches for more details.
 package policies
 
 import (
-	"fmt"
-	"strings"
-
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/common/flogging"
-	cb "github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protos/msp"
-	"github.com/hyperledger/fabric/protoutil"
-	"github.com/pkg/errors"
-	"go.uber.org/zap/zapcore"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	"github.com/hyperledger/fabric-protos-go/msp"
+	flogging "github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/libpatch/logbridge"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/protoutil"
 )
 
 const (
@@ -72,58 +67,6 @@ type PrincipalSet []*msp.MSPPrincipal
 // PrincipalSets aggregates PrincipalSets
 type PrincipalSets []PrincipalSet
 
-// ContainingOnly returns PrincipalSets that contain only principals of the given predicate
-func (psSets PrincipalSets) ContainingOnly(f func(*msp.MSPPrincipal) bool) PrincipalSets {
-	var res PrincipalSets
-	for _, set := range psSets {
-		if !set.ContainingOnly(f) {
-			continue
-		}
-		res = append(res, set)
-	}
-	return res
-}
-
-// ContainingOnly returns whether the given PrincipalSet contains only Principals
-// that satisfy the given predicate
-func (ps PrincipalSet) ContainingOnly(f func(*msp.MSPPrincipal) bool) bool {
-	for _, principal := range ps {
-		if !f(principal) {
-			return false
-		}
-	}
-	return true
-}
-
-// UniqueSet returns a histogram that is induced by the PrincipalSet
-func (ps PrincipalSet) UniqueSet() map[*msp.MSPPrincipal]int {
-	// Create a histogram that holds the MSPPrincipals and counts them
-	histogram := make(map[struct {
-		cls       int32
-		principal string
-	}]int)
-	// Now, populate the histogram
-	for _, principal := range ps {
-		key := struct {
-			cls       int32
-			principal string
-		}{
-			cls:       int32(principal.PrincipalClassification),
-			principal: string(principal.Principal),
-		}
-		histogram[key]++
-	}
-	// Finally, convert to a histogram of MSPPrincipal pointers
-	res := make(map[*msp.MSPPrincipal]int)
-	for principal, count := range histogram {
-		res[&msp.MSPPrincipal{
-			PrincipalClassification: msp.MSPPrincipal_Classification(principal.cls),
-			Principal:               []byte(principal.principal),
-		}] = count
-	}
-	return res
-}
-
 // Converter represents a policy
 // which may be translated into a SignaturePolicyEnvelope
 type Converter interface {
@@ -168,8 +111,6 @@ type ChannelPolicyManagerGetter interface {
 // PolicyManagerGetterFunc is a function adapater for ChannelPolicyManagerGetter.
 type PolicyManagerGetterFunc func(channelID string) Manager
 
-func (p PolicyManagerGetterFunc) Manager(channelID string) Manager { return p(channelID) }
-
 // ManagerImpl is an implementation of Manager and configtx.ConfigHandler
 // In general, it should only be referenced as an Impl for the configtx.ConfigManager
 type ManagerImpl struct {
@@ -178,159 +119,9 @@ type ManagerImpl struct {
 	managers map[string]*ManagerImpl
 }
 
-// NewManagerImpl creates a new ManagerImpl with the given CryptoHelper
-func NewManagerImpl(path string, providers map[int32]Provider, root *cb.ConfigGroup) (*ManagerImpl, error) {
-	var err error
-	_, ok := providers[int32(cb.Policy_IMPLICIT_META)]
-	if ok {
-		logger.Panicf("ImplicitMetaPolicy type must be provider by the policy manager")
-	}
-
-	managers := make(map[string]*ManagerImpl)
-
-	for groupName, group := range root.Groups {
-		managers[groupName], err = NewManagerImpl(path+PathSeparator+groupName, providers, group)
-		if err != nil {
-			return nil, err
-		}
-	}
-
-	policies := make(map[string]Policy)
-	for policyName, configPolicy := range root.Policies {
-		policy := configPolicy.Policy
-		if policy == nil {
-			return nil, fmt.Errorf("policy %s at path %s was nil", policyName, path)
-		}
-
-		var cPolicy Policy
-
-		if policy.Type == int32(cb.Policy_IMPLICIT_META) {
-			imp, err := NewImplicitMetaPolicy(policy.Value, managers)
-			if err != nil {
-				return nil, errors.Wrapf(err, "implicit policy %s at path %s did not compile", policyName, path)
-			}
-			cPolicy = imp
-		} else {
-			provider, ok := providers[int32(policy.Type)]
-			if !ok {
-				return nil, fmt.Errorf("policy %s at path %s has unknown policy type: %v", policyName, path, policy.Type)
-			}
-
-			var err error
-			cPolicy, _, err = provider.NewPolicy(policy.Value)
-			if err != nil {
-				return nil, errors.Wrapf(err, "policy %s at path %s did not compile", policyName, path)
-			}
-		}
-
-		policies[policyName] = cPolicy
-
-		logger.Debugf("Proposed new policy %s for %s", policyName, path)
-	}
-
-	for groupName, manager := range managers {
-		for policyName, policy := range manager.Policies {
-			policies[groupName+PathSeparator+policyName] = policy
-		}
-	}
-
-	return &ManagerImpl{
-		path:     path,
-		Policies: policies,
-		managers: managers,
-	}, nil
-}
-
 type rejectPolicy string
 
-func (rp rejectPolicy) Evaluate(signedData []*protoutil.SignedData) error {
-	return errors.Errorf("no such policy: '%s'", rp)
-}
-
-// Manager returns the sub-policy manager for a given path and whether it exists
-func (pm *ManagerImpl) Manager(path []string) (Manager, bool) {
-	logger.Debugf("Manager %s looking up path %v", pm.path, path)
-	for manager := range pm.managers {
-		logger.Debugf("Manager %s has managers %s", pm.path, manager)
-	}
-	if len(path) == 0 {
-		return pm, true
-	}
-
-	m, ok := pm.managers[path[0]]
-	if !ok {
-		return nil, false
-	}
-
-	return m.Manager(path[1:])
-}
-
 type PolicyLogger struct {
 	Policy     Policy
 	policyName string
 }
-
-func (pl *PolicyLogger) Evaluate(signatureSet []*protoutil.SignedData) error {
-	if logger.IsEnabledFor(zapcore.DebugLevel) {
-		logger.Debugf("== Evaluating %T Policy %s ==", pl.Policy, pl.policyName)
-		defer logger.Debugf("== Done Evaluating %T Policy %s", pl.Policy, pl.policyName)
-	}
-
-	err := pl.Policy.Evaluate(signatureSet)
-	if err != nil {
-		logger.Debugf("Signature set did not satisfy policy %s", pl.policyName)
-	} else {
-		logger.Debugf("Signature set satisfies policy %s", pl.policyName)
-	}
-	return err
-}
-
-func (pl *PolicyLogger) Convert() (*cb.SignaturePolicyEnvelope, error) {
-	logger.Debugf("== Converting %T Policy %s ==", pl.Policy, pl.policyName)
-
-	convertiblePolicy, ok := pl.Policy.(Converter)
-	if !ok {
-		logger.Errorf("policy (name='%s',type='%T') is not convertible to SignaturePolicyEnvelope", pl.policyName, pl.Policy)
-		return nil, errors.Errorf("policy (name='%s',type='%T') is not convertible to SignaturePolicyEnvelope", pl.policyName, pl.Policy)
-	}
-
-	cp, err := convertiblePolicy.Convert()
-	if err != nil {
-		logger.Errorf("== Error Converting %T Policy %s, err %s", pl.Policy, pl.policyName, err.Error())
-	} else {
-		logger.Debugf("== Done Converting %T Policy %s", pl.Policy, pl.policyName)
-	}
-
-	return cp, err
-}
-
-// GetPolicy returns a policy and true if it was the policy requested, or false if it is the default reject policy
-func (pm *ManagerImpl) GetPolicy(id string) (Policy, bool) {
-	if id == "" {
-		logger.Errorf("Returning dummy reject all policy because no policy ID supplied")
-		return rejectPolicy(id), false
-	}
-	var relpath string
-
-	if strings.HasPrefix(id, PathSeparator) {
-		if !strings.HasPrefix(id, PathSeparator+pm.path) {
-			logger.Debugf("Requested absolute policy %s from %s, returning rejectAll", id, pm.path)
-			return rejectPolicy(id), false
-		}
-		// strip off the leading slash, the path, and the trailing slash
-		relpath = id[1+len(pm.path)+1:]
-	} else {
-		relpath = id
-	}
-
-	policy, ok := pm.Policies[relpath]
-	if !ok {
-		logger.Debugf("Returning dummy reject all policy because %s could not be found in %s/%s", id, pm.path, relpath)
-		return rejectPolicy(relpath), false
-	}
-
-	return &PolicyLogger{
-		Policy:     policy,
-		policyName: PathSeparator + pm.path + PathSeparator + relpath,
-	}, true
-}
diff --git a/internal/github.com/hyperledger/fabric/common/policies/util.go b/internal/github.com/hyperledger/fabric/common/policies/util.go
index 4a91cd0..3c08751 100644
--- a/internal/github.com/hyperledger/fabric/common/policies/util.go
+++ b/internal/github.com/hyperledger/fabric/common/policies/util.go
@@ -11,8 +11,8 @@ Please review third_party pinning scripts and patches for more details.
 package policies
 
 import (
-	cb "github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protoutil"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/protoutil"
 )
 
 // ConfigPolicy defines a common representation for different *cb.ConfigPolicy values.
diff --git a/internal/github.com/hyperledger/fabric/common/tools/protolator/json.go b/internal/github.com/hyperledger/fabric/common/tools/protolator/json.go
index 0ff7cda..2ed39f9 100644
--- a/internal/github.com/hyperledger/fabric/common/tools/protolator/json.go
+++ b/internal/github.com/hyperledger/fabric/common/tools/protolator/json.go
@@ -20,7 +20,7 @@ import (
 
 	"github.com/golang/protobuf/jsonpb"
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/common/tools/protolator/protoext"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext"
 )
 
 // MostlyDeterministicMarshal is _NOT_ the function you are looking for.
diff --git a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/common.go b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/common.go
index 9bd671e..feb6ff0 100644
--- a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/common.go
+++ b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/common.go
@@ -14,9 +14,9 @@ import (
 	"fmt"
 
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protos/msp"
-	"github.com/hyperledger/fabric/protos/peer"
+	"github.com/hyperledger/fabric-protos-go/common"
+	"github.com/hyperledger/fabric-protos-go/msp"
+	"github.com/hyperledger/fabric-protos-go/peer"
 )
 
 type Envelope struct{ *common.Envelope }
diff --git a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/configtx.go b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/configtx.go
index 8cf6923..4eb5709 100644
--- a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/configtx.go
+++ b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/configtx.go
@@ -14,7 +14,7 @@ import (
 	"fmt"
 
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/protos/common"
+	"github.com/hyperledger/fabric-protos-go/common"
 )
 
 type ConfigUpdateEnvelope struct{ *common.ConfigUpdateEnvelope }
diff --git a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/configuration.go b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/configuration.go
index 4eeea07..206f14a 100644
--- a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/configuration.go
+++ b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/configuration.go
@@ -14,10 +14,10 @@ import (
 	"fmt"
 
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/common/tools/protolator/protoext/ordererext"
-	"github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext"
-	"github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protos/msp"
+	"github.com/hyperledger/fabric-protos-go/common"
+	"github.com/hyperledger/fabric-protos-go/msp"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/ordererext"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext"
 
 	"github.com/pkg/errors"
 )
diff --git a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/policies.go b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/policies.go
index 5437e05..690b7c3 100644
--- a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/policies.go
+++ b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext/policies.go
@@ -14,7 +14,7 @@ import (
 	"fmt"
 
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/protos/common"
+	"github.com/hyperledger/fabric-protos-go/common"
 )
 
 type Policy struct{ *common.Policy }
diff --git a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/decorate.go b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/decorate.go
index 3a1241f..5537cda 100644
--- a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/decorate.go
+++ b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/decorate.go
@@ -12,16 +12,16 @@ package protoext
 
 import (
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext"
-	"github.com/hyperledger/fabric/common/tools/protolator/protoext/ledger/rwsetext"
-	"github.com/hyperledger/fabric/common/tools/protolator/protoext/mspext"
-	"github.com/hyperledger/fabric/common/tools/protolator/protoext/ordererext"
-	"github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext"
-	"github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protos/ledger/rwset"
-	"github.com/hyperledger/fabric/protos/msp"
-	"github.com/hyperledger/fabric/protos/orderer"
-	"github.com/hyperledger/fabric/protos/peer"
+	"github.com/hyperledger/fabric-protos-go/common"
+	"github.com/hyperledger/fabric-protos-go/ledger/rwset"
+	"github.com/hyperledger/fabric-protos-go/msp"
+	"github.com/hyperledger/fabric-protos-go/orderer"
+	"github.com/hyperledger/fabric-protos-go/peer"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/commonext"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/ledger/rwsetext"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/mspext"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/ordererext"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext"
 )
 
 // Docorate will add additional capabilities to some protobuf messages that
diff --git a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/ledger/rwsetext/rwset.go b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/ledger/rwsetext/rwset.go
index 77dfdec..dca7989 100644
--- a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/ledger/rwsetext/rwset.go
+++ b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/ledger/rwsetext/rwset.go
@@ -14,8 +14,8 @@ import (
 	"fmt"
 
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/protos/ledger/rwset"
-	"github.com/hyperledger/fabric/protos/ledger/rwset/kvrwset"
+	"github.com/hyperledger/fabric-protos-go/ledger/rwset"
+	"github.com/hyperledger/fabric-protos-go/ledger/rwset/kvrwset"
 )
 
 type TxReadWriteSet struct{ *rwset.TxReadWriteSet }
diff --git a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/mspext/msp_config.go b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/mspext/msp_config.go
index baaa362..3e6f4df 100644
--- a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/mspext/msp_config.go
+++ b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/mspext/msp_config.go
@@ -14,7 +14,7 @@ import (
 	"fmt"
 
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/protos/msp"
+	"github.com/hyperledger/fabric-protos-go/msp"
 )
 
 type MSPConfig struct{ *msp.MSPConfig }
diff --git a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/mspext/msp_principal.go b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/mspext/msp_principal.go
index 31cc608..df7df8b 100644
--- a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/mspext/msp_principal.go
+++ b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/mspext/msp_principal.go
@@ -14,7 +14,7 @@ import (
 	"fmt"
 
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/protos/msp"
+	"github.com/hyperledger/fabric-protos-go/msp"
 )
 
 type MSPPrincipal struct{ *msp.MSPPrincipal }
diff --git a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/ordererext/configuration.go b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/ordererext/configuration.go
index 6a065e6..02ae882 100644
--- a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/ordererext/configuration.go
+++ b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/ordererext/configuration.go
@@ -15,10 +15,10 @@ import (
 
 	"github.com/golang/protobuf/proto"
 	"github.com/golang/protobuf/ptypes/empty"
-	"github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protos/msp"
-	"github.com/hyperledger/fabric/protos/orderer"
-	"github.com/hyperledger/fabric/protos/orderer/etcdraft"
+	"github.com/hyperledger/fabric-protos-go/common"
+	"github.com/hyperledger/fabric-protos-go/msp"
+	"github.com/hyperledger/fabric-protos-go/orderer"
+	"github.com/hyperledger/fabric-protos-go/orderer/etcdraft"
 )
 
 type DynamicOrdererGroup struct {
diff --git a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/configuration.go b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/configuration.go
index 91f92da..9f010db 100644
--- a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/configuration.go
+++ b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/configuration.go
@@ -14,9 +14,9 @@ import (
 	"fmt"
 
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protos/msp"
-	"github.com/hyperledger/fabric/protos/peer"
+	"github.com/hyperledger/fabric-protos-go/common"
+	"github.com/hyperledger/fabric-protos-go/msp"
+	"github.com/hyperledger/fabric-protos-go/peer"
 )
 
 type DynamicApplicationGroup struct {
diff --git a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/proposal.go b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/proposal.go
index b0ecfdb..9a25e58 100644
--- a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/proposal.go
+++ b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/proposal.go
@@ -14,8 +14,8 @@ import (
 	"fmt"
 
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/protos/ledger/rwset"
-	"github.com/hyperledger/fabric/protos/peer"
+	"github.com/hyperledger/fabric-protos-go/ledger/rwset"
+	"github.com/hyperledger/fabric-protos-go/peer"
 )
 
 type ChaincodeProposalPayload struct {
diff --git a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/proposal_response.go b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/proposal_response.go
index a6b597f..a15a207 100644
--- a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/proposal_response.go
+++ b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/proposal_response.go
@@ -14,7 +14,7 @@ import (
 	"fmt"
 
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/protos/peer"
+	"github.com/hyperledger/fabric-protos-go/peer"
 )
 
 type ProposalResponsePayload struct {
diff --git a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/transaction.go b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/transaction.go
index 4caf634..6ac9725 100644
--- a/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/transaction.go
+++ b/internal/github.com/hyperledger/fabric/common/tools/protolator/protoext/peerext/transaction.go
@@ -14,8 +14,8 @@ import (
 	"fmt"
 
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protos/peer"
+	"github.com/hyperledger/fabric-protos-go/common"
+	"github.com/hyperledger/fabric-protos-go/peer"
 )
 
 type TransactionAction struct { // nothing was testing this
diff --git a/internal/github.com/hyperledger/fabric/common/util/utils.go b/internal/github.com/hyperledger/fabric/common/util/utils.go
index 61c148f..30a4c94 100644
--- a/internal/github.com/hyperledger/fabric/common/util/utils.go
+++ b/internal/github.com/hyperledger/fabric/common/util/utils.go
@@ -12,33 +12,11 @@ package util
 
 import (
 	"crypto/rand"
+
 	"fmt"
 	"io"
-	"time"
-
-	"github.com/golang/protobuf/ptypes/timestamp"
-	"github.com/hyperledger/fabric/bccsp"
-	"github.com/hyperledger/fabric/bccsp/factory"
 )
 
-// ComputeSHA256 returns SHA2-256 on data
-func ComputeSHA256(data []byte) (hash []byte) {
-	hash, err := factory.GetDefault().Hash(data, &bccsp.SHA256Opts{})
-	if err != nil {
-		panic(fmt.Errorf("Failed computing SHA256 on [% x]", data))
-	}
-	return
-}
-
-// ComputeSHA3256 returns SHA3-256 on data
-func ComputeSHA3256(data []byte) (hash []byte) {
-	hash, err := factory.GetDefault().Hash(data, &bccsp.SHA3_256Opts{})
-	if err != nil {
-		panic(fmt.Errorf("Failed computing SHA3_256 on [% x]", data))
-	}
-	return
-}
-
 // GenerateBytesUUID returns a UUID based on RFC 4122 returning the generated bytes
 func GenerateBytesUUID() []byte {
 	uuid := make([]byte, 16)
@@ -62,34 +40,10 @@ func GenerateUUID() string {
 	return idBytesToStr(uuid)
 }
 
-// CreateUtcTimestamp returns a google/protobuf/Timestamp in UTC
-func CreateUtcTimestamp() *timestamp.Timestamp {
-	now := time.Now().UTC()
-	secs := now.Unix()
-	nanos := int32(now.UnixNano() - (secs * 1000000000))
-	return &(timestamp.Timestamp{Seconds: secs, Nanos: nanos})
-}
-
 func idBytesToStr(id []byte) string {
 	return fmt.Sprintf("%x-%x-%x-%x-%x", id[0:4], id[4:6], id[6:8], id[8:10], id[10:])
 }
 
-// ToChaincodeArgs converts string args to []byte args
-func ToChaincodeArgs(args ...string) [][]byte {
-	bargs := make([][]byte, len(args))
-	for i, arg := range args {
-		bargs[i] = []byte(arg)
-	}
-	return bargs
-}
-
-const testchainid = "testchainid"
-
-//GetTestChainID returns the CHAINID constant in use by orderer
-func GetTestChainID() string {
-	return testchainid
-}
-
 // ConcatenateBytes is useful for combining multiple arrays of bytes, especially for
 // signatures or digests over multiple fields
 func ConcatenateBytes(data ...[]byte) []byte {
diff --git a/internal/github.com/hyperledger/fabric/common/viperutil/config_util.go b/internal/github.com/hyperledger/fabric/common/viperutil/config_util.go
index ae7725f..bdb5382 100644
--- a/internal/github.com/hyperledger/fabric/common/viperutil/config_util.go
+++ b/internal/github.com/hyperledger/fabric/common/viperutil/config_util.go
@@ -24,10 +24,10 @@ import (
 
 	"github.com/Shopify/sarama"
 	version "github.com/hashicorp/go-version"
-	"github.com/hyperledger/fabric/common/flogging"
 	"github.com/mitchellh/mapstructure"
 	"github.com/pkg/errors"
 	"github.com/spf13/viper"
+	flogging "github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/libpatch/logbridge"
 )
 
 var logger = flogging.MustGetLogger("viperutil")
diff --git a/internal/github.com/hyperledger/fabric/core/config/config.go b/internal/github.com/hyperledger/fabric/core/config/config.go
deleted file mode 100644
index 3e97783..0000000
--- a/internal/github.com/hyperledger/fabric/core/config/config.go
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
-Copyright Greg Haskins <gregory.haskins@gmail.com> 2017, All Rights Reserved.
-Copyright IBM Corp. All Rights Reserved.
-
-SPDX-License-Identifier: Apache-2.0
-*/
-/*
-Notice: This file has been modified for TrustBloc Fabric Lib Go EXT usage.
-Please review third_party pinning scripts and patches for more details.
-*/
-
-package config
-
-import (
-	"fmt"
-	"os"
-	"path/filepath"
-
-	"github.com/spf13/viper"
-)
-
-func dirExists(path string) bool {
-	fi, err := os.Stat(path)
-	if err != nil {
-		return false
-	}
-	return fi.IsDir()
-}
-
-func AddConfigPath(v *viper.Viper, p string) {
-	if v != nil {
-		v.AddConfigPath(p)
-	} else {
-		viper.AddConfigPath(p)
-	}
-}
-
-//----------------------------------------------------------------------------------
-// TranslatePath()
-//----------------------------------------------------------------------------------
-// Translates a relative path into a fully qualified path relative to the config
-// file that specified it.  Absolute paths are passed unscathed.
-//----------------------------------------------------------------------------------
-func TranslatePath(base, p string) string {
-	if filepath.IsAbs(p) {
-		return p
-	}
-
-	return filepath.Join(base, p)
-}
-
-//----------------------------------------------------------------------------------
-// TranslatePathInPlace()
-//----------------------------------------------------------------------------------
-// Translates a relative path into a fully qualified path in-place (updating the
-// pointer) relative to the config file that specified it.  Absolute paths are
-// passed unscathed.
-//----------------------------------------------------------------------------------
-func TranslatePathInPlace(base string, p *string) {
-	*p = TranslatePath(base, *p)
-}
-
-//----------------------------------------------------------------------------------
-// GetPath()
-//----------------------------------------------------------------------------------
-// GetPath allows configuration strings that specify a (config-file) relative path
-//
-// For example: Assume our config is located in /etc/hyperledger/fabric/core.yaml with
-// a key "msp.configPath" = "msp/config.yaml".
-//
-// This function will return:
-//      GetPath("msp.configPath") -> /etc/hyperledger/fabric/msp/config.yaml
-//
-//----------------------------------------------------------------------------------
-func GetPath(key string) string {
-	p := viper.GetString(key)
-	if p == "" {
-		return ""
-	}
-
-	return TranslatePath(filepath.Dir(viper.ConfigFileUsed()), p)
-}
-
-const OfficialPath = "/etc/hyperledger/fabric"
-
-//----------------------------------------------------------------------------------
-// InitViper()
-//----------------------------------------------------------------------------------
-// Performs basic initialization of our viper-based configuration layer.
-// Primary thrust is to establish the paths that should be consulted to find
-// the configuration we need.  If v == nil, we will initialize the global
-// Viper instance
-//----------------------------------------------------------------------------------
-func InitViper(v *viper.Viper, configName string) error {
-	var altPath = os.Getenv("FABRIC_CFG_PATH")
-	if altPath != "" {
-		// If the user has overridden the path with an envvar, its the only path
-		// we will consider
-
-		if !dirExists(altPath) {
-			return fmt.Errorf("FABRIC_CFG_PATH %s does not exist", altPath)
-		}
-
-		AddConfigPath(v, altPath)
-	} else {
-		// If we get here, we should use the default paths in priority order:
-		//
-		// *) CWD
-		// *) /etc/hyperledger/fabric
-
-		// CWD
-		AddConfigPath(v, "./")
-
-		// And finally, the official path
-		if dirExists(OfficialPath) {
-			AddConfigPath(v, OfficialPath)
-		}
-	}
-
-	// Now set the configuration file.
-	if v != nil {
-		v.SetConfigName(configName)
-	} else {
-		viper.SetConfigName(configName)
-	}
-
-	return nil
-}
diff --git a/internal/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/rwsetutil/rwset_proto_util.go b/internal/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/rwsetutil/rwset_proto_util.go
index 6c382b8..a24deb9 100644
--- a/internal/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/rwsetutil/rwset_proto_util.go
+++ b/internal/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/rwsetutil/rwset_proto_util.go
@@ -22,10 +22,8 @@ package rwsetutil
 
 import (
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/version"
-	"github.com/hyperledger/fabric/core/ledger/util"
-	"github.com/hyperledger/fabric/protos/ledger/rwset"
-	"github.com/hyperledger/fabric/protos/ledger/rwset/kvrwset"
+	"github.com/hyperledger/fabric-protos-go/ledger/rwset"
+	"github.com/hyperledger/fabric-protos-go/ledger/rwset/kvrwset"
 )
 
 /////////////////////////////////////////////////////////////////
@@ -51,32 +49,6 @@ type CollHashedRwSet struct {
 	PvtRwSetHash   []byte
 }
 
-// GetPvtDataHash returns the PvtRwSetHash for a given namespace and collection
-func (txRwSet *TxRwSet) GetPvtDataHash(ns, coll string) []byte {
-	// we could build and use a map to reduce the number of lookup
-	// in the future call. However, we decided to defer such optimization
-	// due to the following assumptions (mainly to avoid additioan LOC).
-	// we assume that the number of namespaces and collections in a txRWSet
-	// to be very minimal (in a single digit),
-	for _, nsRwSet := range txRwSet.NsRwSets {
-		if nsRwSet.NameSpace != ns {
-			continue
-		}
-		return nsRwSet.getPvtDataHash(coll)
-	}
-	return nil
-}
-
-func (nsRwSet *NsRwSet) getPvtDataHash(coll string) []byte {
-	for _, collHashedRwSet := range nsRwSet.CollHashedRwSets {
-		if collHashedRwSet.CollectionName != coll {
-			continue
-		}
-		return collHashedRwSet.PvtRwSetHash
-	}
-	return nil
-}
-
 /////////////////////////////////////////////////////////////////
 // Messages related to PRIVATE read-write set
 /////////////////////////////////////////////////////////////////
@@ -236,19 +208,6 @@ func collHashedRwSetFromProtoMsg(protoMsg *rwset.CollectionHashedReadWriteSet) (
 	return colHashedRwSet, nil
 }
 
-func (txRwSet *TxRwSet) NumCollections() int {
-	if txRwSet == nil {
-		return 0
-	}
-	numColls := 0
-	for _, nsRwset := range txRwSet.NsRwSets {
-		for range nsRwset.CollHashedRwSets {
-			numColls++
-		}
-	}
-	return numColls
-}
-
 ///////////////////////////////////////////////////////////////////////////////
 // functions for private read-write set
 ///////////////////////////////////////////////////////////////////////////////
@@ -321,41 +280,3 @@ func collPvtRwSetFromProtoMsg(protoMsg *rwset.CollectionPvtReadWriteSet) (*CollP
 	}
 	return collPvtRwSet, nil
 }
-
-// NewKVRead helps constructing proto message kvrwset.KVRead
-func NewKVRead(key string, version *version.Height) *kvrwset.KVRead {
-	return &kvrwset.KVRead{Key: key, Version: newProtoVersion(version)}
-}
-
-// NewVersion helps converting proto message kvrwset.Version to version.Height
-func NewVersion(protoVersion *kvrwset.Version) *version.Height {
-	if protoVersion == nil {
-		return nil
-	}
-	return version.NewHeight(protoVersion.BlockNum, protoVersion.TxNum)
-}
-
-func newProtoVersion(height *version.Height) *kvrwset.Version {
-	if height == nil {
-		return nil
-	}
-	return &kvrwset.Version{BlockNum: height.BlockNum, TxNum: height.TxNum}
-}
-
-func newKVWrite(key string, value []byte) *kvrwset.KVWrite {
-	return &kvrwset.KVWrite{Key: key, IsDelete: value == nil, Value: value}
-}
-
-func newPvtKVReadHash(key string, version *version.Height) *kvrwset.KVReadHash {
-	return &kvrwset.KVReadHash{KeyHash: util.ComputeStringHash(key), Version: newProtoVersion(version)}
-}
-
-func newPvtKVWriteAndHash(key string, value []byte) (*kvrwset.KVWrite, *kvrwset.KVWriteHash) {
-	kvWrite := newKVWrite(key, value)
-	var keyHash, valueHash []byte
-	keyHash = util.ComputeStringHash(key)
-	if !kvWrite.IsDelete {
-		valueHash = util.ComputeHash(value)
-	}
-	return kvWrite, &kvrwset.KVWriteHash{KeyHash: keyHash, IsDelete: kvWrite.IsDelete, ValueHash: valueHash}
-}
diff --git a/internal/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/version/version.go b/internal/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/version/version.go
new file mode 100644
index 0000000..ca984f6
--- /dev/null
+++ b/internal/github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/version/version.go
@@ -0,0 +1,27 @@
+/*
+Copyright IBM Corp. 2016 All Rights Reserved.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+		 http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+*/
+/*
+Notice: This file has been modified for TrustBloc Fabric Lib Go EXT usage.
+Please review third_party pinning scripts and patches for more details.
+*/
+
+package version
+
+// Height represents the height of a transaction in blockchain
+type Height struct {
+	BlockNum uint64
+	TxNum    uint64
+}
diff --git a/internal/github.com/hyperledger/fabric/core/ledger/util/txvalidationflags.go b/internal/github.com/hyperledger/fabric/core/ledger/util/txvalidationflags.go
index 3d57a33..bd6b108 100644
--- a/internal/github.com/hyperledger/fabric/core/ledger/util/txvalidationflags.go
+++ b/internal/github.com/hyperledger/fabric/core/ledger/util/txvalidationflags.go
@@ -11,7 +11,7 @@ Please review third_party pinning scripts and patches for more details.
 package util
 
 import (
-	"github.com/hyperledger/fabric/protos/peer"
+	"github.com/hyperledger/fabric-protos-go/peer"
 )
 
 // TxValidationFlags is array of transaction validation codes. It is used when committer validates block.
@@ -23,12 +23,6 @@ func NewTxValidationFlags(size int) TxValidationFlags {
 	return newTxValidationFlagsSetValue(size, peer.TxValidationCode_NOT_VALIDATED)
 }
 
-// NewTxValidationFlagsSetValue Creates new object-array of validation codes with target size
-// and the supplied value
-func NewTxValidationFlagsSetValue(size int, value peer.TxValidationCode) TxValidationFlags {
-	return newTxValidationFlagsSetValue(size, value)
-}
-
 func newTxValidationFlagsSetValue(size int, value peer.TxValidationCode) TxValidationFlags {
 	inst := make(TxValidationFlags, size)
 	for i := range inst {
@@ -38,11 +32,6 @@ func newTxValidationFlagsSetValue(size int, value peer.TxValidationCode) TxValid
 	return inst
 }
 
-// SetFlag assigns validation code to specified transaction
-func (obj TxValidationFlags) SetFlag(txIndex int, flag peer.TxValidationCode) {
-	obj[txIndex] = uint8(flag)
-}
-
 // Flag returns validation code at specified transaction
 func (obj TxValidationFlags) Flag(txIndex int) peer.TxValidationCode {
 	return peer.TxValidationCode(obj[txIndex])
diff --git a/internal/github.com/hyperledger/fabric/internal/protoutil/commonutils.go b/internal/github.com/hyperledger/fabric/internal/protoutil/commonutils.go
new file mode 100644
index 0000000..c9e8105
--- /dev/null
+++ b/internal/github.com/hyperledger/fabric/internal/protoutil/commonutils.go
@@ -0,0 +1,25 @@
+/*
+Copyright IBM Corp. All Rights Reserved.
+
+SPDX-License-Identifier: Apache-2.0
+*/
+/*
+Notice: This file has been modified for TrustBloc Fabric Lib Go EXT usage.
+Please review third_party pinning scripts and patches for more details.
+*/
+
+package protoutil
+
+import (
+	"github.com/golang/protobuf/proto"
+)
+
+// MarshalOrPanic serializes a protobuf message and panics if this
+// operation fails
+func MarshalOrPanic(pb proto.Message) []byte {
+	data, err := proto.Marshal(pb)
+	if err != nil {
+		panic(err)
+	}
+	return data
+}
diff --git a/internal/github.com/hyperledger/fabric/libinternal/configtxgen/encoder/encoder.go b/internal/github.com/hyperledger/fabric/libinternal/configtxgen/encoder/encoder.go
index 1e0b01f..c5e9dbb 100644
--- a/internal/github.com/hyperledger/fabric/libinternal/configtxgen/encoder/encoder.go
+++ b/internal/github.com/hyperledger/fabric/libinternal/configtxgen/encoder/encoder.go
@@ -11,21 +11,21 @@ Please review third_party pinning scripts and patches for more details.
 package encoder
 
 import (
-	"github.com/gogo/protobuf/proto"
-	"github.com/hyperledger/fabric/common/cauthdsl"
-	"github.com/hyperledger/fabric/common/channelconfig"
-	"github.com/hyperledger/fabric/common/flogging"
-	"github.com/hyperledger/fabric/common/genesis"
-	"github.com/hyperledger/fabric/common/policies"
-	"github.com/hyperledger/fabric/common/util"
-	genesisconfig "github.com/hyperledger/fabric/internal/configtxgen/localconfig"
-	"github.com/hyperledger/fabric/internal/configtxlator/update"
-	"github.com/hyperledger/fabric/internal/pkg/identity"
-	"github.com/hyperledger/fabric/msp"
-	cb "github.com/hyperledger/fabric/protos/common"
-	pb "github.com/hyperledger/fabric/protos/peer"
-	"github.com/hyperledger/fabric/protoutil"
+	"github.com/golang/protobuf/proto"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	pb "github.com/hyperledger/fabric-protos-go/peer"
 	"github.com/pkg/errors"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/cauthdsl"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/channelconfig"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/genesis"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/policies"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/util"
+	genesisconfig "github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/libinternal/configtxgen/localconfig"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/libinternal/configtxlator/update"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/libinternal/pkg/identity"
+	flogging "github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/libpatch/logbridge"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/msp"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/protoutil"
 )
 
 const (
diff --git a/internal/github.com/hyperledger/fabric/libinternal/configtxgen/localconfig/config.go b/internal/github.com/hyperledger/fabric/libinternal/configtxgen/localconfig/config.go
index b48f968..37447c4 100644
--- a/internal/github.com/hyperledger/fabric/libinternal/configtxgen/localconfig/config.go
+++ b/internal/github.com/hyperledger/fabric/libinternal/configtxgen/localconfig/config.go
@@ -16,13 +16,14 @@ import (
 	"strings"
 	"time"
 
-	"github.com/hyperledger/fabric/common/flogging"
-	"github.com/hyperledger/fabric/common/policies"
-	"github.com/hyperledger/fabric/common/viperutil"
-	cf "github.com/hyperledger/fabric/core/config"
-	"github.com/hyperledger/fabric/msp"
-	"github.com/hyperledger/fabric/protos/orderer/etcdraft"
+	"github.com/pkg/errors"
+
+	"github.com/hyperledger/fabric-protos-go/orderer/etcdraft"
 	"github.com/spf13/viper"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/policies"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/common/viperutil"
+	flogging "github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/libpatch/logbridge"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/msp"
 )
 
 const (
@@ -222,16 +223,15 @@ var genesisDefaults = TopLevel{
 //
 // Note, for environment overrides to work properly within a profile, Load
 // should be used instead.
-func LoadTopLevel(configPaths ...string) *TopLevel {
+func LoadTopLevel(configPaths ...string) (*TopLevel, error) {
+	if len(configPaths) == 0 {
+		return nil, errors.New("Missing config path")
+	}
 	config := viper.New()
-	if len(configPaths) > 0 {
-		for _, p := range configPaths {
-			config.AddConfigPath(p)
-		}
-		config.SetConfigName(configName)
-	} else {
-		cf.InitViper(config, configName)
+	for _, p := range configPaths {
+		config.AddConfigPath(p)
 	}
+	config.SetConfigName(configName)
 
 	// For environment variables
 	config.SetEnvPrefix(Prefix)
@@ -242,36 +242,35 @@ func LoadTopLevel(configPaths ...string) *TopLevel {
 
 	err := config.ReadInConfig()
 	if err != nil {
-		logger.Panic("Error reading configuration: ", err)
+		return nil, errors.WithMessage(err, "Error reading configuration: ")
 	}
 	logger.Debugf("Using config file: %s", config.ConfigFileUsed())
 
 	var uconf TopLevel
 	err = viperutil.EnhancedExactUnmarshal(config, &uconf)
 	if err != nil {
-		logger.Panic("Error unmarshaling config into struct: ", err)
+		return nil, errors.WithMessage(err, "Error unmarshaling config into struct: ")
 	}
 
 	(&uconf).completeInitialization(filepath.Dir(config.ConfigFileUsed()))
 
 	logger.Infof("Loaded configuration: %s", config.ConfigFileUsed())
 
-	return &uconf
+	return &uconf, nil
 }
 
 // Load returns the orderer/application config combination that corresponds to
 // a given profile. Config paths may optionally be provided and will be used
 // in place of the FABRIC_CFG_PATH env variable.
-func Load(profile string, configPaths ...string) *Profile {
+func Load(profile string, configPaths ...string) (*Profile, error) {
+	if len(configPaths) == 0 {
+		return nil, errors.New("Missing config path")
+	}
 	config := viper.New()
-	if len(configPaths) > 0 {
-		for _, p := range configPaths {
-			config.AddConfigPath(p)
-		}
-		config.SetConfigName(configName)
-	} else {
-		cf.InitViper(config, configName)
+	for _, p := range configPaths {
+		config.AddConfigPath(p)
 	}
+	config.SetConfigName(configName)
 
 	// For environment variables
 	config.SetEnvPrefix(Prefix)
@@ -284,26 +283,26 @@ func Load(profile string, configPaths ...string) *Profile {
 
 	err := config.ReadInConfig()
 	if err != nil {
-		logger.Panic("Error reading configuration: ", err)
+		return nil, errors.WithMessage(err, "Error reading configuration: ")
 	}
 	logger.Debugf("Using config file: %s", config.ConfigFileUsed())
 
 	var uconf TopLevel
 	err = viperutil.EnhancedExactUnmarshal(config, &uconf)
 	if err != nil {
-		logger.Panic("Error unmarshaling config into struct: ", err)
+		return nil, errors.WithMessage(err, "Error unmarshaling config into struct: ")
 	}
 
 	result, ok := uconf.Profiles[profile]
 	if !ok {
-		logger.Panic("Could not find profile: ", profile)
+		return nil, errors.Errorf("Could not find profile: %v", profile)
 	}
 
 	result.completeInitialization(filepath.Dir(config.ConfigFileUsed()))
 
 	logger.Infof("Loaded configuration: %s", config.ConfigFileUsed())
 
-	return result
+	return result, nil
 }
 
 func (t *TopLevel) completeInitialization(configDir string) {
@@ -366,7 +365,7 @@ func (org *Organization) completeInitialization(configDir string) {
 	translatePaths(configDir, org)
 }
 
-func (ord *Orderer) completeInitialization(configDir string) {
+func (ord *Orderer) completeInitialization(configDir string) error {
 loop:
 	for {
 		switch {
@@ -406,7 +405,7 @@ loop:
 		}
 	case EtcdRaft:
 		if ord.EtcdRaft == nil {
-			logger.Panicf("%s configuration missing", EtcdRaft)
+			return errors.Errorf("%s configuration missing", EtcdRaft)
 		}
 		if ord.EtcdRaft.Options == nil {
 			logger.Infof("Orderer.EtcdRaft.Options unset, setting to %v", genesisDefaults.Orderer.EtcdRaft.Options)
@@ -436,7 +435,7 @@ loop:
 				ord.EtcdRaft.Options.SnapshotIntervalSize = genesisDefaults.Orderer.EtcdRaft.Options.SnapshotIntervalSize
 
 			case len(ord.EtcdRaft.Consenters) == 0:
-				logger.Panicf("%s configuration did not specify any consenter", EtcdRaft)
+				return errors.Errorf("%s configuration did not specify any consenter", EtcdRaft)
 
 			default:
 				break second_loop
@@ -444,7 +443,7 @@ loop:
 		}
 
 		if _, err := time.ParseDuration(ord.EtcdRaft.Options.TickInterval); err != nil {
-			logger.Panicf("Etcdraft TickInterval (%s) must be in time duration format", ord.EtcdRaft.Options.TickInterval)
+			return errors.Errorf("Etcdraft TickInterval (%s) must be in time duration format", ord.EtcdRaft.Options.TickInterval)
 		}
 
 		// validate the specified members for Options
@@ -454,29 +453,42 @@ loop:
 
 		for _, c := range ord.EtcdRaft.GetConsenters() {
 			if c.Host == "" {
-				logger.Panicf("consenter info in %s configuration did not specify host", EtcdRaft)
+				return errors.Errorf("consenter info in %s configuration did not specify host", EtcdRaft)
 			}
 			if c.Port == 0 {
-				logger.Panicf("consenter info in %s configuration did not specify port", EtcdRaft)
+				return errors.Errorf("consenter info in %s configuration did not specify port", EtcdRaft)
 			}
 			if c.ClientTlsCert == nil {
-				logger.Panicf("consenter info in %s configuration did not specify client TLS cert", EtcdRaft)
+				return errors.Errorf("consenter info in %s configuration did not specify client TLS cert", EtcdRaft)
 			}
 			if c.ServerTlsCert == nil {
-				logger.Panicf("consenter info in %s configuration did not specify server TLS cert", EtcdRaft)
+				return errors.Errorf("consenter info in %s configuration did not specify server TLS cert", EtcdRaft)
 			}
 			clientCertPath := string(c.GetClientTlsCert())
-			cf.TranslatePathInPlace(configDir, &clientCertPath)
+			translatePathInPlace(configDir, &clientCertPath)
 			c.ClientTlsCert = []byte(clientCertPath)
 			serverCertPath := string(c.GetServerTlsCert())
-			cf.TranslatePathInPlace(configDir, &serverCertPath)
+			translatePathInPlace(configDir, &serverCertPath)
 			c.ServerTlsCert = []byte(serverCertPath)
 		}
 	default:
-		logger.Panicf("unknown orderer type: %s", ord.OrdererType)
+		return errors.Errorf("unknown orderer type: %s", ord.OrdererType)
 	}
+	return nil
 }
 
 func translatePaths(configDir string, org *Organization) {
-	cf.TranslatePathInPlace(configDir, &org.MSPDir)
+	translatePathInPlace(configDir, &org.MSPDir)
+}
+
+func translatePath(base, p string) string {
+	if filepath.IsAbs(p) {
+		return p
+	}
+
+	return filepath.Join(base, p)
+}
+
+func translatePathInPlace(base string, p *string) {
+	*p = translatePath(base, *p)
 }
diff --git a/internal/github.com/hyperledger/fabric/libinternal/configtxlator/update/update.go b/internal/github.com/hyperledger/fabric/libinternal/configtxlator/update/update.go
index 936a43e..1f96b09 100644
--- a/internal/github.com/hyperledger/fabric/libinternal/configtxlator/update/update.go
+++ b/internal/github.com/hyperledger/fabric/libinternal/configtxlator/update/update.go
@@ -19,8 +19,8 @@ import (
 	"fmt"
 
 	"github.com/golang/protobuf/proto"
-	cb "github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protoutil"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/protoutil"
 )
 
 func computePoliciesMapUpdate(original, updated map[string]*cb.ConfigPolicy) (readSet, writeSet, sameSet map[string]*cb.ConfigPolicy, updatedMembers bool) {
diff --git a/internal/github.com/hyperledger/fabric/libpatch/logbridge/logbridge.go b/internal/github.com/hyperledger/fabric/libpatch/logbridge/logbridge.go
new file mode 100644
index 0000000..3584ed4
--- /dev/null
+++ b/internal/github.com/hyperledger/fabric/libpatch/logbridge/logbridge.go
@@ -0,0 +1,55 @@
+/*
+Copyright SecureKey Technologies Inc. All Rights Reserved.
+
+SPDX-License-Identifier: Apache-2.0
+*/
+/*
+Notice: This file has been modified for TrustBloc Fabric Lib Go EXT usage.
+Please review third_party pinning scripts and patches for more details.
+*/
+
+package logbridge
+
+import (
+	"github.com/trustbloc/fabric-lib-go-ext/pkg/common/logging"
+)
+
+// Log levels (from pkg/logging/level.go).
+const (
+	CRITICAL logging.Level = iota
+	ERROR
+	WARNING
+	INFO
+	DEBUG
+)
+
+// Logger bridges the lib's logger struct
+type Logger struct {
+	*logging.Logger
+	module string
+}
+
+// MustGetLogger bridges calls the lib's NewLogger
+func MustGetLogger(module string) *Logger {
+	fabModule := "fablibgoext"
+	logger := logging.NewLogger(fabModule)
+	return &Logger{
+		Logger: logger,
+		module: fabModule,
+	}
+}
+
+// Warningf bridges calls to the lib logger's Warnf.
+func (l *Logger) Warningf(format string, args ...interface{}) {
+	l.Warnf(format, args...)
+}
+
+// Warning bridges calls to the lib logger's Warn.
+func (l *Logger) Warning(args ...interface{}) {
+	l.Warn(args...)
+}
+
+// IsEnabledFor bridges calls to the lib logger's IsEnabledFor.
+func (l *Logger) IsEnabledFor(level logging.Level) bool {
+	return logging.IsEnabledFor(l.module, level)
+}
diff --git a/internal/github.com/hyperledger/fabric/msp/configbuilder.go b/internal/github.com/hyperledger/fabric/msp/configbuilder.go
index 1aa27a5..09ddc74 100644
--- a/internal/github.com/hyperledger/fabric/msp/configbuilder.go
+++ b/internal/github.com/hyperledger/fabric/msp/configbuilder.go
@@ -17,13 +17,14 @@ import (
 	"path/filepath"
 
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/bccsp"
-	"github.com/hyperledger/fabric/bccsp/factory"
-	"github.com/hyperledger/fabric/protos/msp"
+	"github.com/hyperledger/fabric-protos-go/msp"
 	"github.com/pkg/errors"
+	flogging "github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/libpatch/logbridge"
 	"gopkg.in/yaml.v2"
 )
 
+var mspLogger = flogging.MustGetLogger("msp")
+
 // OrganizationalUnitIdentifiersConfiguration is used to represent an OU
 // and an associated trusted certificate
 type OrganizationalUnitIdentifiersConfiguration struct {
@@ -127,8 +128,6 @@ func getPemMaterialFromDir(dir string) ([][]byte, error) {
 const (
 	cacerts              = "cacerts"
 	admincerts           = "admincerts"
-	signcerts            = "signcerts"
-	keystore             = "keystore"
 	intermediatecerts    = "intermediatecerts"
 	crlsfolder           = "crls"
 	configfilename       = "config.yaml"
@@ -136,74 +135,11 @@ const (
 	tlsintermediatecerts = "tlsintermediatecerts"
 )
 
-func SetupBCCSPKeystoreConfig(bccspConfig *factory.FactoryOpts, keystoreDir string) *factory.FactoryOpts {
-	if bccspConfig == nil {
-		bccspConfig = factory.GetDefaultOpts()
-	}
-
-	if bccspConfig.ProviderName == "SW" {
-		if bccspConfig.SwOpts == nil {
-			bccspConfig.SwOpts = factory.GetDefaultOpts().SwOpts
-		}
-
-		// Only override the KeyStorePath if it was left empty
-		if bccspConfig.SwOpts.FileKeystore == nil ||
-			bccspConfig.SwOpts.FileKeystore.KeyStorePath == "" {
-			bccspConfig.SwOpts.Ephemeral = false
-			bccspConfig.SwOpts.FileKeystore = &factory.FileKeystoreOpts{KeyStorePath: keystoreDir}
-		}
-	}
-
-	return bccspConfig
-}
-
-// GetLocalMspConfigWithType returns a local MSP
-// configuration for the MSP in the specified
-// directory, with the specified ID and type
-func GetLocalMspConfigWithType(dir string, bccspConfig *factory.FactoryOpts, ID, mspType string) (*msp.MSPConfig, error) {
-	switch mspType {
-	case ProviderTypeToString(FABRIC):
-		return GetLocalMspConfig(dir, bccspConfig, ID)
-	case ProviderTypeToString(IDEMIX):
-		return GetIdemixMspConfig(dir, ID)
-	default:
-		return nil, errors.Errorf("unknown MSP type '%s'", mspType)
-	}
-}
-
-func GetLocalMspConfig(dir string, bccspConfig *factory.FactoryOpts, ID string) (*msp.MSPConfig, error) {
-	signcertDir := filepath.Join(dir, signcerts)
-	keystoreDir := filepath.Join(dir, keystore)
-	bccspConfig = SetupBCCSPKeystoreConfig(bccspConfig, keystoreDir)
-
-	err := factory.InitFactories(bccspConfig)
-	if err != nil {
-		return nil, errors.WithMessage(err, "could not initialize BCCSP Factories")
-	}
-
-	signcert, err := getPemMaterialFromDir(signcertDir)
-	if err != nil || len(signcert) == 0 {
-		return nil, errors.Wrapf(err, "could not load a valid signer certificate from directory %s", signcertDir)
-	}
-
-	/* FIXME: for now we're making the following assumptions
-	1) there is exactly one signing cert
-	2) BCCSP's KeyStore has the private key that matches SKI of
-	   signing cert
-	*/
-
-	sigid := &msp.SigningIdentityInfo{PublicSigner: signcert[0], PrivateSigner: nil}
-
-	return getMspConfig(dir, ID, sigid)
-}
-
 // GetVerifyingMspConfig returns an MSP config given directory, ID and type
 func GetVerifyingMspConfig(dir, ID, mspType string) (*msp.MSPConfig, error) {
 	switch mspType {
 	case ProviderTypeToString(FABRIC):
 		return getMspConfig(dir, ID, nil)
-	case ProviderTypeToString(IDEMIX):
-		return GetIdemixMspConfig(dir, ID)
 	default:
 		return nil, errors.Errorf("unknown MSP type '%s'", mspType)
 	}
@@ -340,8 +276,8 @@ func getMspConfig(dir string, ID string, sigid *msp.SigningIdentityInfo) (*msp.M
 
 	// Set FabricCryptoConfig
 	cryptoConfig := &msp.FabricCryptoConfig{
-		SignatureHashFamily:            bccsp.SHA2,
-		IdentityIdentifierHashFunction: bccsp.SHA256,
+		SignatureHashFamily:            SHA2,
+		IdentityIdentifierHashFunction: SHA256,
 	}
 
 	// Compose FabricMSPConfig
@@ -377,47 +313,3 @@ func loadCertificateAt(dir, certificatePath string, ouType string) []byte {
 
 	return nil
 }
-
-const (
-	IdemixConfigDirMsp                  = "msp"
-	IdemixConfigDirUser                 = "user"
-	IdemixConfigFileIssuerPublicKey     = "IssuerPublicKey"
-	IdemixConfigFileRevocationPublicKey = "RevocationPublicKey"
-	IdemixConfigFileSigner              = "SignerConfig"
-)
-
-// GetIdemixMspConfig returns the configuration for the Idemix MSP
-func GetIdemixMspConfig(dir string, ID string) (*msp.MSPConfig, error) {
-	ipkBytes, err := readFile(filepath.Join(dir, IdemixConfigDirMsp, IdemixConfigFileIssuerPublicKey))
-	if err != nil {
-		return nil, errors.Wrapf(err, "failed to read issuer public key file")
-	}
-
-	revocationPkBytes, err := readFile(filepath.Join(dir, IdemixConfigDirMsp, IdemixConfigFileRevocationPublicKey))
-	if err != nil {
-		return nil, errors.Wrapf(err, "failed to read revocation public key file")
-	}
-
-	idemixConfig := &msp.IdemixMSPConfig{
-		Name:         ID,
-		Ipk:          ipkBytes,
-		RevocationPk: revocationPkBytes,
-	}
-
-	signerBytes, err := readFile(filepath.Join(dir, IdemixConfigDirUser, IdemixConfigFileSigner))
-	if err == nil {
-		signerConfig := &msp.IdemixMSPSignerConfig{}
-		err = proto.Unmarshal(signerBytes, signerConfig)
-		if err != nil {
-			return nil, err
-		}
-		idemixConfig.Signer = signerConfig
-	}
-
-	confBytes, err := proto.Marshal(idemixConfig)
-	if err != nil {
-		return nil, err
-	}
-
-	return &msp.MSPConfig{Config: confBytes, Type: int32(IDEMIX)}, nil
-}
diff --git a/internal/github.com/hyperledger/fabric/msp/factory.go b/internal/github.com/hyperledger/fabric/msp/factory.go
index d29a648..8718b1e 100644
--- a/internal/github.com/hyperledger/fabric/msp/factory.go
+++ b/internal/github.com/hyperledger/fabric/msp/factory.go
@@ -10,11 +10,6 @@ Please review third_party pinning scripts and patches for more details.
 
 package msp
 
-import (
-	"github.com/hyperledger/fabric/bccsp"
-	"github.com/pkg/errors"
-)
-
 type MSPVersion int
 
 const (
@@ -23,60 +18,3 @@ const (
 	MSPv1_3
 	MSPv1_4_2
 )
-
-// NewOpts represent
-type NewOpts interface {
-	// GetVersion returns the MSP's version to be instantiated
-	GetVersion() MSPVersion
-}
-
-// NewBaseOpts is the default base type for all MSP instantiation Opts
-type NewBaseOpts struct {
-	Version MSPVersion
-}
-
-func (o *NewBaseOpts) GetVersion() MSPVersion {
-	return o.Version
-}
-
-// BCCSPNewOpts contains the options to instantiate a new BCCSP-based (X509) MSP
-type BCCSPNewOpts struct {
-	NewBaseOpts
-}
-
-// IdemixNewOpts contains the options to instantiate a new Idemix-based MSP
-type IdemixNewOpts struct {
-	NewBaseOpts
-}
-
-// New create a new MSP instance depending on the passed Opts
-func New(opts NewOpts, cryptoProvider bccsp.BCCSP) (MSP, error) {
-	switch opts.(type) {
-	case *BCCSPNewOpts:
-		switch opts.GetVersion() {
-		case MSPv1_0:
-			return newBccspMsp(MSPv1_0, cryptoProvider)
-		case MSPv1_1:
-			return newBccspMsp(MSPv1_1, cryptoProvider)
-		case MSPv1_3:
-			return newBccspMsp(MSPv1_3, cryptoProvider)
-		case MSPv1_4_2:
-			return newBccspMsp(MSPv1_4_2, cryptoProvider)
-		default:
-			return nil, errors.Errorf("Invalid *BCCSPNewOpts. Version not recognized [%v]", opts.GetVersion())
-		}
-	case *IdemixNewOpts:
-		switch opts.GetVersion() {
-		case MSPv1_4_2:
-			fallthrough
-		case MSPv1_3:
-			return newIdemixMsp(MSPv1_3)
-		case MSPv1_1:
-			return newIdemixMsp(MSPv1_1)
-		default:
-			return nil, errors.Errorf("Invalid *IdemixNewOpts. Version not recognized [%v]", opts.GetVersion())
-		}
-	default:
-		return nil, errors.Errorf("Invalid msp.NewOpts instance. It must be either *BCCSPNewOpts or *IdemixNewOpts. It was [%v]", opts)
-	}
-}
diff --git a/internal/github.com/hyperledger/fabric/msp/msp.go b/internal/github.com/hyperledger/fabric/msp/msp.go
index 36d0e69..c1aa8ed 100644
--- a/internal/github.com/hyperledger/fabric/msp/msp.go
+++ b/internal/github.com/hyperledger/fabric/msp/msp.go
@@ -10,193 +10,9 @@ Please review third_party pinning scripts and patches for more details.
 
 package msp
 
-import (
-	"time"
-
-	"github.com/hyperledger/fabric/protos/msp"
-)
-
-// IdentityDeserializer is implemented by both MSPManger and MSP
-type IdentityDeserializer interface {
-	// DeserializeIdentity deserializes an identity.
-	// Deserialization will fail if the identity is associated to
-	// an msp that is different from this one that is performing
-	// the deserialization.
-	DeserializeIdentity(serializedIdentity []byte) (Identity, error)
-
-	// IsWellFormed checks if the given identity can be deserialized into its provider-specific form
-	IsWellFormed(identity *msp.SerializedIdentity) error
-}
-
-// Membership service provider APIs for Hyperledger Fabric:
-//
-// By "membership service provider" we refer to an abstract component of the
-// system that would provide (anonymous) credentials to clients, and peers for
-// them to participate in Hyperledger/fabric network. Clients use these
-// credentials to authenticate their transactions, and peers use these credentials
-// to authenticate transaction processing results (endorsements). While
-// strongly connected to the transaction processing components of the systems,
-// this interface aims to have membership services components defined, in such
-// a way such that alternate implementations of this can be smoothly plugged in
-// without modifying the core of transaction processing components of the system.
-//
-// This file includes Membership service provider interface that covers the
-// needs of a peer membership service provider interface.
-
-// MSPManager is an interface defining a manager of one or more MSPs. This
-// essentially acts as a mediator to MSP calls and routes MSP related calls
-// to the appropriate MSP.
-// This object is immutable, it is initialized once and never changed.
-type MSPManager interface {
-
-	// IdentityDeserializer interface needs to be implemented by MSPManager
-	IdentityDeserializer
-
-	// Setup the MSP manager instance according to configuration information
-	Setup(msps []MSP) error
-
-	// GetMSPs Provides a list of Membership Service providers
-	GetMSPs() (map[string]MSP, error)
-}
-
-// MSP is the minimal Membership Service Provider Interface to be implemented
-// to accommodate peer functionality
-type MSP interface {
-
-	// IdentityDeserializer interface needs to be implemented by MSP
-	IdentityDeserializer
-
-	// Setup the MSP instance according to configuration information
-	Setup(config *msp.MSPConfig) error
-
-	// GetVersion returns the version of this MSP
-	GetVersion() MSPVersion
-
-	// GetType returns the provider type
-	GetType() ProviderType
-
-	// GetIdentifier returns the provider identifier
-	GetIdentifier() (string, error)
-
-	// GetSigningIdentity returns a signing identity corresponding to the provided identifier
-	GetSigningIdentity(identifier *IdentityIdentifier) (SigningIdentity, error)
-
-	// GetDefaultSigningIdentity returns the default signing identity
-	GetDefaultSigningIdentity() (SigningIdentity, error)
-
-	// GetTLSRootCerts returns the TLS root certificates for this MSP
-	GetTLSRootCerts() [][]byte
-
-	// GetTLSIntermediateCerts returns the TLS intermediate root certificates for this MSP
-	GetTLSIntermediateCerts() [][]byte
-
-	// Validate checks whether the supplied identity is valid
-	Validate(id Identity) error
-
-	// SatisfiesPrincipal checks whether the identity matches
-	// the description supplied in MSPPrincipal. The check may
-	// involve a byte-by-byte comparison (if the principal is
-	// a serialized identity) or may require MSP validation
-	SatisfiesPrincipal(id Identity, principal *msp.MSPPrincipal) error
-}
-
-// OUIdentifier represents an organizational unit and
-// its related chain of trust identifier.
-type OUIdentifier struct {
-	// CertifiersIdentifier is the hash of certificates chain of trust
-	// related to this organizational unit
-	CertifiersIdentifier []byte
-	// OrganizationUnitIdentifier defines the organizational unit under the
-	// MSP identified with MSPIdentifier
-	OrganizationalUnitIdentifier string
-}
-
 // From this point on, there are interfaces that are shared within the peer and client API
 // of the membership service provider.
 
-// Identity interface defining operations associated to a "certificate".
-// That is, the public part of the identity could be thought to be a certificate,
-// and offers solely signature verification capabilities. This is to be used
-// at the peer side when verifying certificates that transactions are signed
-// with, and verifying signatures that correspond to these certificates.///
-type Identity interface {
-
-	// ExpiresAt returns the time at which the Identity expires.
-	// If the returned time is the zero value, it implies
-	// the Identity does not expire, or that its expiration
-	// time is unknown
-	ExpiresAt() time.Time
-
-	// GetIdentifier returns the identifier of that identity
-	GetIdentifier() *IdentityIdentifier
-
-	// GetMSPIdentifier returns the MSP Id for this instance
-	GetMSPIdentifier() string
-
-	// Validate uses the rules that govern this identity to validate it.
-	// E.g., if it is a fabric TCert implemented as identity, validate
-	// will check the TCert signature against the assumed root certificate
-	// authority.
-	Validate() error
-
-	// GetOrganizationalUnits returns zero or more organization units or
-	// divisions this identity is related to as long as this is public
-	// information. Certain MSP implementations may use attributes
-	// that are publicly associated to this identity, or the identifier of
-	// the root certificate authority that has provided signatures on this
-	// certificate.
-	// Examples:
-	//  - if the identity is an x.509 certificate, this function returns one
-	//    or more string which is encoded in the Subject's Distinguished Name
-	//    of the type OU
-	// TODO: For X.509 based identities, check if we need a dedicated type
-	//       for OU where the Certificate OU is properly namespaced by the
-	//       signer's identity
-	GetOrganizationalUnits() []*OUIdentifier
-
-	// Anonymous returns true if this is an anonymous identity, false otherwise
-	Anonymous() bool
-
-	// Verify a signature over some message using this identity as reference
-	Verify(msg []byte, sig []byte) error
-
-	// Serialize converts an identity to bytes
-	Serialize() ([]byte, error)
-
-	// SatisfiesPrincipal checks whether this instance matches
-	// the description supplied in MSPPrincipal. The check may
-	// involve a byte-by-byte comparison (if the principal is
-	// a serialized identity) or may require MSP validation
-	SatisfiesPrincipal(principal *msp.MSPPrincipal) error
-}
-
-// SigningIdentity is an extension of Identity to cover signing capabilities.
-// E.g., signing identity should be requested in the case of a client who wishes
-// to sign transactions, or fabric endorser who wishes to sign proposal
-// processing outcomes.
-type SigningIdentity interface {
-
-	// Extends Identity
-	Identity
-
-	// Sign the message
-	Sign(msg []byte) ([]byte, error)
-
-	// GetPublicVersion returns the public parts of this identity
-	GetPublicVersion() Identity
-}
-
-// IdentityIdentifier is a holder for the identifier of a specific
-// identity, naturally namespaced, by its provider identifier.
-type IdentityIdentifier struct {
-
-	// The identifier of the associated membership service provider
-	Mspid string
-
-	// The identifier for an identity within a provider
-	Id string
-}
-
 // ProviderType indicates the type of an identity provider
 type ProviderType int
 
@@ -215,11 +31,6 @@ var mspTypeStrings = map[ProviderType]string{
 	IDEMIX: "idemix",
 }
 
-var Options = map[string]NewOpts{
-	ProviderTypeToString(FABRIC): &BCCSPNewOpts{NewBaseOpts: NewBaseOpts{Version: MSPv1_0}},
-	ProviderTypeToString(IDEMIX): &IdemixNewOpts{NewBaseOpts: NewBaseOpts{Version: MSPv1_1}},
-}
-
 // ProviderTypeToString returns a string that represents the ProviderType integer
 func ProviderTypeToString(id ProviderType) string {
 	if res, found := mspTypeStrings[id]; found {
@@ -228,3 +39,11 @@ func ProviderTypeToString(id ProviderType) string {
 
 	return ""
 }
+
+const (
+	// SHA2 is an identifier for SHA2 hash family
+	SHA2 = "SHA2"
+
+	// SHA256
+	SHA256 = "SHA256"
+)
diff --git a/internal/github.com/hyperledger/fabric/protoutil/blockutils.go b/internal/github.com/hyperledger/fabric/protoutil/blockutils.go
index 026b09c..fe130ab 100644
--- a/internal/github.com/hyperledger/fabric/protoutil/blockutils.go
+++ b/internal/github.com/hyperledger/fabric/protoutil/blockutils.go
@@ -17,7 +17,7 @@ import (
 	"math/big"
 
 	"github.com/golang/protobuf/proto"
-	cb "github.com/hyperledger/fabric/protos/common"
+	cb "github.com/hyperledger/fabric-protos-go/common"
 	"github.com/pkg/errors"
 )
 
diff --git a/internal/github.com/hyperledger/fabric/protoutil/commonutils.go b/internal/github.com/hyperledger/fabric/protoutil/commonutils.go
index f58464b..784f8b3 100644
--- a/internal/github.com/hyperledger/fabric/protoutil/commonutils.go
+++ b/internal/github.com/hyperledger/fabric/protoutil/commonutils.go
@@ -7,10 +7,6 @@ SPDX-License-Identifier: Apache-2.0
 Notice: This file has been modified for TrustBloc Fabric Lib Go EXT usage.
 Please review third_party pinning scripts and patches for more details.
 */
-/*
-Notice: This file has been modified for TrustBloc Fabric Lib Go EXT usage.
-Please review third_party pinning scripts and patches for more details.
-*/
 
 package protoutil
 
@@ -21,9 +17,9 @@ import (
 
 	"github.com/golang/protobuf/proto"
 	"github.com/golang/protobuf/ptypes/timestamp"
-	"github.com/hyperledger/fabric/internal/pkg/identity"
-	cb "github.com/hyperledger/fabric/protos/common"
+	cb "github.com/hyperledger/fabric-protos-go/common"
 	"github.com/pkg/errors"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/libinternal/pkg/identity"
 )
 
 // MarshalOrPanic serializes a protobuf message and panics if this
@@ -180,19 +176,6 @@ func NewSignatureHeaderOrPanic(id identity.Serializer) *cb.SignatureHeader {
 	return signatureHeader
 }
 
-// SignOrPanic signs a message and panics on error.
-func SignOrPanic(signer identity.Signer, msg []byte) []byte {
-	if signer == nil {
-		panic(errors.New("invalid signer. cannot be nil"))
-	}
-
-	sigma, err := signer.Sign(msg)
-	if err != nil {
-		panic(fmt.Errorf("failed generating signature: %s", err))
-	}
-	return sigma
-}
-
 // IsConfigBlock validates whenever given block contains configuration
 // update transaction
 func IsConfigBlock(block *cb.Block) bool {
diff --git a/internal/github.com/hyperledger/fabric/protoutil/configtxutils.go b/internal/github.com/hyperledger/fabric/protoutil/configtxutils.go
index a977c47..8bfcf75 100644
--- a/internal/github.com/hyperledger/fabric/protoutil/configtxutils.go
+++ b/internal/github.com/hyperledger/fabric/protoutil/configtxutils.go
@@ -14,7 +14,7 @@ Please review third_party pinning scripts and patches for more details.
 
 package protoutil
 
-import "github.com/hyperledger/fabric/protos/common"
+import "github.com/hyperledger/fabric-protos-go/common"
 
 func NewConfigGroup() *common.ConfigGroup {
 	return &common.ConfigGroup{
diff --git a/internal/github.com/hyperledger/fabric/protoutil/proputils.go b/internal/github.com/hyperledger/fabric/protoutil/proputils.go
index 28ca924..980bf81 100644
--- a/internal/github.com/hyperledger/fabric/protoutil/proputils.go
+++ b/internal/github.com/hyperledger/fabric/protoutil/proputils.go
@@ -17,8 +17,8 @@ import (
 
 	"github.com/golang/protobuf/proto"
 	"github.com/golang/protobuf/ptypes"
-	"github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protos/peer"
+	"github.com/hyperledger/fabric-protos-go/common"
+	"github.com/hyperledger/fabric-protos-go/peer"
 	"github.com/pkg/errors"
 )
 
diff --git a/internal/github.com/hyperledger/fabric/protoutil/signeddata.go b/internal/github.com/hyperledger/fabric/protoutil/signeddata.go
index 37b89fe..73c7ed2 100644
--- a/internal/github.com/hyperledger/fabric/protoutil/signeddata.go
+++ b/internal/github.com/hyperledger/fabric/protoutil/signeddata.go
@@ -14,8 +14,9 @@ import (
 	"bytes"
 	"fmt"
 
-	"github.com/gogo/protobuf/proto"
-	"github.com/hyperledger/fabric/protos/common"
+	"github.com/golang/protobuf/proto"
+
+	"github.com/hyperledger/fabric-protos-go/common"
 )
 
 // SignedData is used to represent the general triplet required to verify a signature
diff --git a/internal/github.com/hyperledger/fabric/protoutil/txutils.go b/internal/github.com/hyperledger/fabric/protoutil/txutils.go
index dd6b089..789f57e 100644
--- a/internal/github.com/hyperledger/fabric/protoutil/txutils.go
+++ b/internal/github.com/hyperledger/fabric/protoutil/txutils.go
@@ -15,10 +15,10 @@ import (
 	"crypto/sha256"
 
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/internal/pkg/identity"
-	"github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protos/peer"
+	"github.com/hyperledger/fabric-protos-go/common"
+	"github.com/hyperledger/fabric-protos-go/peer"
 	"github.com/pkg/errors"
+	"github.com/trustbloc/fabric-lib-go-ext/internal/github.com/hyperledger/fabric/libinternal/pkg/identity"
 )
 
 // GetPayloads gets the underlying payload objects in a TransactionAction
diff --git a/internal/github.com/hyperledger/fabric/protoutil/unmarshalers.go b/internal/github.com/hyperledger/fabric/protoutil/unmarshalers.go
index aa6d88c..f65afe8 100644
--- a/internal/github.com/hyperledger/fabric/protoutil/unmarshalers.go
+++ b/internal/github.com/hyperledger/fabric/protoutil/unmarshalers.go
@@ -12,11 +12,11 @@ package protoutil
 
 import (
 	"github.com/golang/protobuf/proto"
-	"github.com/hyperledger/fabric/protos/common"
-	cb "github.com/hyperledger/fabric/protos/common"
-	"github.com/hyperledger/fabric/protos/msp"
-	"github.com/hyperledger/fabric/protos/peer"
-	pb "github.com/hyperledger/fabric/protos/peer"
+	"github.com/hyperledger/fabric-protos-go/common"
+	cb "github.com/hyperledger/fabric-protos-go/common"
+	"github.com/hyperledger/fabric-protos-go/msp"
+	"github.com/hyperledger/fabric-protos-go/peer"
+	pb "github.com/hyperledger/fabric-protos-go/peer"
 	"github.com/pkg/errors"
 )
 
-- 
2.21.0 (Apple Git-122)

